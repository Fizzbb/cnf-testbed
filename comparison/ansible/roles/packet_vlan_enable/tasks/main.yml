- name: find bond interface second interface
  set_fact:
    vlan_interface: "{{ hostvars[inventory_hostname].ansible_bond0.slaves[1] }}"
  ignore_errors: true
  register: bond0_slave_1
- name: get PCI bus info for interface
  set_fact:
    vlan_pci_id: "{{ 'ansible_' + vlan_interface + '.pciid' }}"
  when: not vlan_interface == ''

- name: check if vlan interface is slaved
  command: grep '{{vlan_interface}}' /sys/class/net/bond0/bonding/slaves
  register: vlan_interface_bonded
  ignore_errors: true

- name: remove second slave interface from bond0
  shell: echo '-{{vlan_interface}}' > /sys/class/net/bond0/bonding/slaves
  register: remove_slave
  when: vlan_interface_bonded.rc == '0'

- name: remove MAC address from VLAN interface
  lineinfile:
    path: /etc/sysconfig/network-scripts/ifcfg-{{vlan_interface}}
    regexp: "HWADDR=.*"
    state: absent
  when:  ansible_os_family == "RedHat" and vlan_interface
- name: remove bond config from ifcfg-{{vlan_interface}}
  lineinfile:
    path: /etc/sysconfig/network-scripts/ifcfg-{{vlan_interface}}
    regexp: "MASTER=.*"
    state: absent
  when:  ansible_os_family == "RedHat" and vlan_interface
  register: master_absent

- name: remove bond config from ifcfg-{{vlan_interface}}
  lineinfile:
    path: /etc/sysconfig/network-scripts/ifcfg-{{vlan_interface}}
    regexp: "SLAVE=.*"
    state: absent
  when:  ansible_os_family == "RedHat" and vlan_interface
  register: slave_absent
#- name: bring ex-slave interface down
#  command: ifdown {{vlan_interface}}
#  when:  master_absent.changed or slave_absent.changed
##- name: bring ex-slave interface up
#  command: ifup {{vlan_interface}}
#  when:  master_absent.changed or slave_absent.changed
