---
- name: Install requied python modules
  pip:
    name: ['pexpect','eventlet==0.22']

- name: Clone Repo
  git:
    repo: 'https://gerrit.fd.io/r/vpp'
    dest: /srv/vpp
    version: "{{vpp_commit}}"
    update: no
  ignore_errors: true

- name: install libmnl-dev on Debian
  apt:
    name: libmnl-dev
  when: ansible_os_family == 'Debian'

- name: install libmnl-devel on RedHat family
  yum:
    name: libmnl-devel
  when: ansible_os_family == 'RedHat'

#- name: Set VPP DPDK mlx5 PMD use
#  lineinfile:
#    dest: /srv/vpp/build-data/platforms/vpp.mk
#    regexp: '^.*vpp_uses_dpdk_mlx5_pmd.*'
#    line: 'vpp_uses_dpdk_mlx5_pmd = yes'
#

- name: Ensure headless jdk 8 is installed instead of 11
  replace:
    path: /srv/vpp/Makefile
    regexp: 'else \n	DEB_DEPENDS \+= default-jdk-headless'
    replace: 'else \n	DEB_DEPENDS += openjdk-8-jdk-headless'
  when: ansible_os_family == 'Debian'

- name: Build Install Dependencies
  expect: 
    chdir: /srv/vpp
    command: make install-dep
    echo: yes
    responses:
    - "Do you want to continue.*": "Y" # Debian
    - "Is this ok*": "y" # Centos
    timeout: 300

#- name: get NASM code from launchpad
#  get_url:
#    url: https://launchpad.net/ubuntu/+archive/primary/+sourcefiles/nasm/2.13.03-2/nasm_2.13.03.orig.tar.xz
#    dest: /srv/vpp/dpdk/nasm_2.13.03.orig.tar.xz

- name: Build dpdk
  #command: make dpdk-install-dev DPDK_MLX5_PMD=y NASM_VER=2.13.03 NASM_TARBALL=nasm-2.13.03.tar.xz NASM_TAR_URL=https://ftp.osuosl.org/pub/blfs/conglomeration/nasm/nasm-2.13.03.tar.xz
  command: make dpdk-install-dev DPDK_MLX5_PMD=y
  args:
    chdir: /srv/vpp

- name: Build release
  command: make build-release
  args:
    chdir: /srv/vpp

- name: Build pkg
  command: make pkg-deb vpp_uses_dpdk_mlx5_pmd=yes
  args:
    chdir: /srv/vpp
  when: ansible_os_family == 'Debian'

- name: Build rpm
  command: make pkg-rpm vpp_uses_dpdk_mlx5_pmd=yes
  args:
    chdir: /srv/vpp
  when: ansible_os_family == 'RedHat'

# TODO: update patterns to use vpp_branch ansible var

- name: find vpp debs to install
  find:
    paths: /srv/vpp
    recurse: yes
    patterns: "vpp_18*deb"
  register: vpp
  when: ansible_os_family == 'Debian'

- name: find vpp rpms to install
  find:
    paths: /srv/vpp
    recurse: yes
    patterns: "vpp-19*rpm"
  register: vpp
  when: ansible_os_family == 'RedHat'

- name: find vpp-lib debs to install
  find:
    paths: /srv/vpp
    recurse: yes
    patterns: "vpp-lib_18*.deb"
  register: vpp_lib
  when: ansible_os_family == 'Debian'

- name: find vpp-lib rpms to install
  find:
    paths: /srv/vpp
    recurse: yes
    patterns: "vpp-lib-19*.rpm"
  register: vpp_lib
  when: ansible_os_family == 'RedHat'

- name: find vpp-plugins debs to install
  find:
    paths: /srv/vpp
    recurse: yes
    patterns: "vpp-plugins_18*.deb"
  register: vpp_plugin
  when: ansible_os_family == 'Debian'

- name: find vpp-plugins rpms to install
  find:
    paths: /srv/vpp
    recurse: yes
    patterns: "vpp-plugins-19*.rpm"
  register: vpp_plugin
  when: ansible_os_family == 'RedHat'

- name: find vpp-selinux-policy rpms to install
  find:
    paths: /srv/vpp
    recurse: yes
    patterns: "vpp-selinux-policy-19*.rpm"
  register: vpp_selinux_policy
  when: ansible_os_family == 'RedHat'

- name: find vpp-api-python debs to install
  find:
    paths: /srv/vpp
    recurse: yes
    patterns: "vpp-api-python_18*.deb"
  register: vpp_api_python
  when: ansible_os_family == 'Debian'

- name: find vpp-api-python rpms to install
  find:
    paths: /srv/vpp
    recurse: yes
    patterns: "vpp-api-python-19*.rpm"
  register: vpp_api_python
  when: ansible_os_family == 'RedHat'

- name: Install vpp library packages
  command: dpkg -i {{item.path}}
  with_items: "{{vpp_lib['files']}}"
  when: ansible_os_family == 'Debian'

- name: Install vpp vpp_selinux_policy packages
  command: yum -y install {{item.path}}
  with_items: "{{vpp_selinux_policy['files']}}"
  when: ansible_os_family == 'RedHat'

- name: Install vpp library packages
  command: yum -y install {{item.path}}
  with_items: "{{vpp_lib['files']}}"
  when: ansible_os_family == 'RedHat'

- name: Install vpp packages
  command: apt install {{item.path}}
  with_items: "{{vpp['files']}}"
  when: ansible_os_family == 'Debian'

- name: Install vpp packages
  command: yum -y install {{item.path}}
  with_items: "{{vpp['files']}}"
  when: ansible_os_family == 'RedHat'

- name: Install vpp plugins packages
  command: apt install {{item.path}}
  with_items: "{{vpp_plugin['files']}}"
  when: ansible_os_family == 'Debian'

- name: Install vpp plugins packages
  command: yum -y install {{item.path}}
  with_items: "{{vpp_plugin['files']}}"
  when: ansible_os_family == 'RedHat'

- name: Install vpp api python packages
  command: apt install {{item.path}}
  with_items: "{{vpp_api_python['files']}}"
  when: ansible_os_family == 'Debian'

- name: Install vpp api python packages
  command: yum -y install {{item.path}}
  with_items: "{{vpp_api_python['files']}}"
  when: ansible_os_family == 'RedHat'

- name: make sure config directory exists
  file:
    name: /etc/vpp
    state: directory

- name: add uplink vpp tap startup script
  template:
    src: uplink.conf
    dest: /etc/vpp/uplink.conf
  #when: inventory_hostname == host_0_address

- name: update vpp startup script for l3
  template:
    src: startupl3.conf
    dest: /etc/vpp/startup.conf
  #when: inventory_hostname == host_0_address

#- name: update vpp startup script compute
#  template:
#    src: startup.conf
#    dest: /etc/vpp/startup.conf
#  when: not inventory_hostname == host_0_address

- name: restart vpp service
  service:
    name: vpp
    state: restarted
