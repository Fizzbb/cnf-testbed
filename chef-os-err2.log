fatal: [147.75.71.98]: FAILED! => {"changed": true, "cmd": ["chef-client", "-z", "-E", "multinode", "-r", "role[multinode-compute]"], "delta": "0:04:23.347049", "end": "2019-04-23 15:48:31.065105", "msg": "non-zero return code", "rc": 1, "start": "2019-04-23 15:44:07.718056", "stderr": "", "stderr_lines": [], "stdout": "[2019-04-23T15:44:09+00:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 14.4.56\u001b[0m
resolving cookbooks for run list: [\"build-essential\", \"openstack-common\", \"openstack-compute::compute\", \"openstack-compute::identity_registration\", \"openstack-network::ml2_core_plugin\", \"openstack-network\", \"openstack-network::plugin_config\"]\u001b[0m
Synchronizing Cookbooks:\u001b[0m
  - build-essential (8.2.1)\u001b[0m
  - openstack-common (18.0.0)\u001b[0m
  - openstack-compute (18.0.0)\u001b[0m
  - openstack-network (18.0.0)\u001b[0m
  - seven_zip (3.1.0)\u001b[0m
  - mingw (2.1.0)\u001b[0m
  - etcd (5.6.0)\u001b[0m
  - mariadb (1.5.4)\u001b[0m
  - memcached (4.1.0)\u001b[0m
  - mysql (8.5.1)\u001b[0m
  - poise-python (1.7.0)\u001b[0m
  - selinux (2.1.1)\u001b[0m
  - openstack-identity (18.0.0)\u001b[0m
  - openstack-image (18.0.0)\u001b[0m
  - openstackclient (18.0.0)\u001b[0m
  - windows (5.3.0)\u001b[0m
  - docker (4.9.2)\u001b[0m
  - apt (7.1.1)\u001b[0m
  - selinux_policy (2.3.4)\u001b[0m
  - yum (5.1.0)\u001b[0m
  - yum-epel (3.3.0)\u001b[0m
  - yum-scl (0.2.0)\u001b[0m
  - runit (5.0.1)\u001b[0m
  - poise (2.8.2)\u001b[0m
  - poise-languages (2.1.2)\u001b[0m
  - apache2 (5.0.1)\u001b[0m
  - inifile_chef_gem (0.1.0)\u001b[0m
  - packagecloud (1.0.1)\u001b[0m
  - poise-archive (1.5.0)\u001b[0m
Installing Cookbook Gems:\u001b[0m
Compiling Cookbooks...\u001b[0m
Converging 56 resources\u001b[0m
Recipe: build-essential::default\u001b[0m
  * build_essential[install_packages] action install
    * apt_package[autoconf, binutils-doc, bison, build-essential, flex, gettext, ncurses-dev] action install
      \u001b[32m- install version 2.69-9 of package autoconf\u001b[0m
      \u001b[32m- install version 2.26.1-1ubuntu1~16.04.8 of package binutils-doc\u001b[0m
      \u001b[32m- install version 2:3.0.4.dfsg-1 of package bison\u001b[0m
      \u001b[32m- install version 2.6.0-11 of package flex\u001b[0m
      \u001b[32m- install version 0.19.7-2ubuntu3.1 of package gettext\u001b[0m
      \u001b[32m- install version 6.0+20160213-1ubuntu1 of package ncurses-dev\u001b[0m
\u001b[0m  
\u001b[0mRecipe: openstack-common::default\u001b[0m
  * apt_update[default] action update
    \u001b[32m- force update new lists of packages\u001b[0m
    * directory[/var/lib/apt/periodic] action create (up to date)
    * directory[/etc/apt/apt.conf.d] action create (up to date)
    * file[/etc/apt/apt.conf.d/15update-stamp] action create_if_missing
      \u001b[32m- create new file /etc/apt/apt.conf.d/15update-stamp\u001b[0m
      \u001b[32m- update content in file /etc/apt/apt.conf.d/15update-stamp from none to 174cdb\u001b[0m
      \u001b[37m--- /etc/apt/apt.conf.d/15update-stamp\t2019-04-23 15:45:04.925230350 +0000\u001b[0m
      \u001b[37m+++ /etc/apt/apt.conf.d/.chef-15update-stamp20190423-11428-1r2e0cs\t2019-04-23 15:45:04.925230350 +0000\u001b[0m
      \u001b[37m@@ -1 +1,2 @@\u001b[0m
      \u001b[37m+APT::Update::Post-Invoke-Success {\"touch /var/lib/apt/periodic/update-success-stamp 2>/dev/null || true\";};\u001b[0m
\u001b[0m    * execute[apt-get -q update] action run
      \u001b[32m- execute [\"apt-get\", \"-q\", \"update\"]\u001b[0m
\u001b[0m  
\u001b[0m  * file[/etc/apt/apt.conf.d/confdef] action create
    \u001b[32m- create new file /etc/apt/apt.conf.d/confdef\u001b[0m
    \u001b[32m- update content in file /etc/apt/apt.conf.d/confdef from none to af5564\u001b[0m
    \u001b[37m--- /etc/apt/apt.conf.d/confdef\t2019-04-23 15:45:06.925422967 +0000\u001b[0m
    \u001b[37m+++ /etc/apt/apt.conf.d/.chef-confdef20190423-11428-118sv3u\t2019-04-23 15:45:06.925422967 +0000\u001b[0m
    \u001b[37m@@ -1 +1,5 @@\u001b[0m
    \u001b[37m+Dpkg::Options {\u001b[0m
    \u001b[37m+      \"--force-confdef\";\u001b[0m
    \u001b[37m+      \"--force-confold\";\u001b[0m
    \u001b[37m+      }\u001b[0m
    \u001b[32m- change mode from '' to '0644'\u001b[0m
    \u001b[32m- change owner from '' to 'root'\u001b[0m
    \u001b[32m- change group from '' to 'root'\u001b[0m
\u001b[0m  * apt_package[ubuntu-cloud-keyring] action upgrade
    \u001b[32m- upgrade package ubuntu-cloud-keyring from uninstalled to 2012.08.14\u001b[0m
\u001b[0m  * python_runtime[2] action install
    * poise_languages_system[python2.7] action install
       (up to date)
    * apt_package[python2.7, python2.7-dev] action nothing (skipped due to action :nothing)
     (up to date)
  * python_runtime_pip[2] action install
    * python_package[pip] action upgrade
      \u001b[32m- upgrade(allow_downgrade) package pip from 8.1.1 to 18.0\u001b[0m
\u001b[0m  
\u001b[0m  * python_package[setuptools] action install
    \u001b[32m- install version 40.0.0 of package setuptools\u001b[0m
\u001b[0m  * python_package[wheel] action install
    \u001b[32m- install version 0.31.1 of package wheel\u001b[0m
\u001b[0m  * python_package[virtualenv] action install
    \u001b[32m- install version 16.4.3 of package virtualenv\u001b[0m
\u001b[0m
\u001b[0mRecipe: openstack-compute::nova-common\u001b[0m
  * apt_package[nova-common] action upgrade
    \u001b[32m- upgrade package nova-common from uninstalled to 2:13.1.4-0ubuntu4.3\u001b[0m
\u001b[0m  * apt_package[python-nova] action upgrade (up to date)
  * apt_package[python-mysqldb] action upgrade
    \u001b[32m- upgrade package python-mysqldb from uninstalled to 1.3.7-1build2\u001b[0m
\u001b[0m  * apt_package[python-memcache] action upgrade (up to date)
  * directory[/etc/nova] action create (up to date)
  * directory[/var/lib/nova] action create (up to date)
  * directory[/var/lib/nova/lock] action create
    \u001b[32m- create new directory /var/lib/nova/lock\u001b[0m
    \u001b[32m- change mode from '' to '0755'\u001b[0m
    \u001b[32m- change owner from '' to 'nova'\u001b[0m
    \u001b[32m- change group from '' to 'nova'\u001b[0m
\u001b[0m  * template[/etc/nova/nova.conf] action create
    \u001b[32m- update content in file /etc/nova/nova.conf from 073495 to 075c1d\u001b[0m
    \u001b[37m--- /etc/nova/nova.conf\t2018-06-27 14:57:19.000000000 +0000\u001b[0m
    \u001b[37m+++ /etc/nova/.chef-nova20190423-11428-jhhjlf.conf\t2019-04-23 15:46:31.757247341 +0000\u001b[0m
    \u001b[37m@@ -1,19 +1,92 @@\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+# This file is automatically generated by Chef\u001b[0m
    \u001b[37m+# Any changes will be overwritten\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m [DEFAULT]\u001b[0m
    \u001b[37m-dhcpbridge_flagfile=/etc/nova/nova.conf\u001b[0m
    \u001b[37m-dhcpbridge=/usr/bin/nova-dhcpbridge\u001b[0m
    \u001b[37m-logdir=/var/log/nova\u001b[0m
    \u001b[37m-state_path=/var/lib/nova\u001b[0m
    \u001b[37m-lock_path=/var/lock/nova\u001b[0m
    \u001b[37m-force_dhcp_release=True\u001b[0m
    \u001b[37m-libvirt_use_virtio_for_bridges=True\u001b[0m
    \u001b[37m-verbose=True\u001b[0m
    \u001b[37m-ec2_private_dns_show_ip=True\u001b[0m
    \u001b[37m-api_paste_config=/etc/nova/api-paste.ini\u001b[0m
    \u001b[37m-enabled_apis=ec2,osapi_compute,metadata\u001b[0m
    \u001b[37m+log_dir = /var/log/nova\u001b[0m
    \u001b[37m+state_path = /var/lib/nova\u001b[0m
    \u001b[37m+compute_driver = libvirt.LibvirtDriver\u001b[0m
    \u001b[37m+auth_version = v3.0\u001b[0m
    \u001b[37m+instances_path = /var/lib/nova/instances\u001b[0m
    \u001b[37m+enabled_apis = osapi_compute\u001b[0m
    \u001b[37m+iscsi_helper = tgtadm\u001b[0m
    \u001b[37m+metadata_listen = 0.0.0.0\u001b[0m
    \u001b[37m+metadata_listen_port = 8775\u001b[0m
    \u001b[37m+transport_url = rabbit://admin:mypass@139.178.70.138:5672/\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m+[keystone_authtoken]\u001b[0m
    \u001b[37m+auth_type = v3password\u001b[0m
    \u001b[37m+region_name = RegionOne\u001b[0m
    \u001b[37m+username = nova\u001b[0m
    \u001b[37m+user_domain_name = Default\u001b[0m
    \u001b[37m+project_domain_name = Default\u001b[0m
    \u001b[37m+project_name = service\u001b[0m
    \u001b[37m+auth_version = v3\u001b[0m
    \u001b[37m+service_token_roles_required = true\u001b[0m
    \u001b[37m+auth_url = http://139.178.70.138:5000/v3\u001b[0m
    \u001b[37m+www_authenticate_uri = http://139.178.70.138:5000/v3\u001b[0m
    \u001b[37m+password = mypass\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[libvirt]\u001b[0m
    \u001b[37m+virt_type = kvm\u001b[0m
    \u001b[37m+images_type = default\u001b[0m
    \u001b[37m+cpu_type = passthrough\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[neutron]\u001b[0m
    \u001b[37m+auth_type = v3password\u001b[0m
    \u001b[37m+region_name = RegionOne\u001b[0m
    \u001b[37m+username = neutron\u001b[0m
    \u001b[37m+user_domain_name = Default\u001b[0m
    \u001b[37m+service_metadata_proxy = true\u001b[0m
    \u001b[37m+project_name = service\u001b[0m
    \u001b[37m+project_domain_name = Default\u001b[0m
    \u001b[37m+auth_url = http://139.178.70.138:5000/v3\u001b[0m
    \u001b[37m+password = mypass\u001b[0m
    \u001b[37m+metadata_proxy_shared_secret = neutron_metadata_secret_token\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[cinder]\u001b[0m
    \u001b[37m+os_region_name = RegionOne\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[oslo_concurrency]\u001b[0m
    \u001b[37m+lock_path = /var/lib/nova/lock\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[placement]\u001b[0m
    \u001b[37m+auth_type = password\u001b[0m
    \u001b[37m+region_name = RegionOne\u001b[0m
    \u001b[37m+username = placement\u001b[0m
    \u001b[37m+user_domain_name = Default\u001b[0m
    \u001b[37m+project_domain_name = Default\u001b[0m
    \u001b[37m+project_name = service\u001b[0m
    \u001b[37m+auth_url = http://139.178.70.138:5000/v3\u001b[0m
    \u001b[37m+password = mypass\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[scheduler]\u001b[0m
    \u001b[37m+discover_hosts_in_cells_interval = 300\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[vnc]\u001b[0m
    \u001b[37m+novncproxy_base_url = http://139.178.70.138:6080/vnc_auto.html\u001b[0m
    \u001b[37m+xvpvncproxy_base_url = http://127.0.0.1:6081/console\u001b[0m
    \u001b[37m+xvpvncproxy_host = 127.0.0.1\u001b[0m
    \u001b[37m+xvpvncproxy_port = 6081\u001b[0m
    \u001b[37m+novncproxy_host = 0.0.0.0\u001b[0m
    \u001b[37m+novncproxy_port = 6080\u001b[0m
    \u001b[37m+server_listen = 127.0.0.1\u001b[0m
    \u001b[37m+server_proxyclient_address = 127.0.0.1\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[glance]\u001b[0m
    \u001b[37m+api_servers = http://139.178.70.138:9292\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[serial_console]\u001b[0m
    \u001b[37m+base_url = ws://127.0.0.1:6083\u001b[0m
    \u001b[37m+proxyclient_address = 127.0.0.1\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[transport_url]\u001b[0m
    \u001b[37m+rabbit_host = 139.178.70.138\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m [database]\u001b[0m
    \u001b[37m-connection=sqlite:////var/lib/nova/nova.sqlite\u001b[0m
    \u001b[37m+connection = mysql+pymysql://nova:mypass@139.178.70.138:3306/nova?charset=utf8\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m [api_database]\u001b[0m
    \u001b[37m-connection=sqlite:////var/lib/nova/nova.sqlite\u001b[0m
    \u001b[37m+connection = mysql+pymysql://nova_api:mypass@139.178.70.138:3306/nova_api?charset=utf8\u001b[0m
\u001b[0m  * ruby_block[delete all attributes in node['openstack']['compute']['conf_secrets']] action run
    \u001b[32m- execute the ruby block delete all attributes in node['openstack']['compute']['conf_secrets']\u001b[0m
\u001b[0m  * template[/etc/nova/rootwrap.conf] action create
    \u001b[32m- update content in file /etc/nova/rootwrap.conf from 3d44b1 to cbcca9\u001b[0m
    \u001b[37m--- /etc/nova/rootwrap.conf\t2017-03-22 10:13:52.000000000 +0000\u001b[0m
    \u001b[37m+++ /etc/nova/.chef-rootwrap20190423-11428-b1tohs.conf\t2019-04-23 15:46:31.797250889 +0000\u001b[0m
    \u001b[37m@@ -1,28 +1,33 @@\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+# This file is automatically generated by Chef\u001b[0m
    \u001b[37m+# Any changes will be overwritten\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m # Configuration for nova-rootwrap\u001b[0m
    \u001b[37m # This file should be owned by (and only-writeable by) the root user\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m [DEFAULT]\u001b[0m
    \u001b[37m # List of directories to load filter definitions from (separated by ',').\u001b[0m
    \u001b[37m # These directories MUST all be only writeable by root !\u001b[0m
    \u001b[37m-filters_path=/etc/nova/rootwrap.d,/usr/share/nova/rootwrap\u001b[0m
    \u001b[37m+filters_path = /etc/nova/rootwrap.d,/usr/share/nova/rootwrap\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m # List of directories to search executables in, in case filters do not\u001b[0m
    \u001b[37m-# explicitly specify a full path (separated by ',')\u001b[0m
    \u001b[37m+# explicitely specify a full path (separated by ',')\u001b[0m
    \u001b[37m # If not specified, defaults to system PATH environment variable.\u001b[0m
    \u001b[37m # These directories MUST all be only writeable by root !\u001b[0m
    \u001b[37m-exec_dirs=/sbin,/usr/sbin,/bin,/usr/bin,/usr/local/sbin,/usr/local/bin\u001b[0m
    \u001b[37m+exec_dirs = /sbin,/usr/sbin,/bin,/usr/bin\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m # Enable logging to syslog\u001b[0m
    \u001b[37m # Default value is False\u001b[0m
    \u001b[37m-use_syslog=False\u001b[0m
    \u001b[37m+use_syslog = False\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m # Which syslog facility to use.\u001b[0m
    \u001b[37m # Valid values include auth, authpriv, syslog, local0, local1...\u001b[0m
    \u001b[37m # Default value is 'syslog'\u001b[0m
    \u001b[37m-syslog_log_facility=syslog\u001b[0m
    \u001b[37m+syslog_log_facility = syslog\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m # Which messages to log.\u001b[0m
    \u001b[37m # INFO means log all usage\u001b[0m
    \u001b[37m # ERROR means only log unsuccessful attempts\u001b[0m
    \u001b[37m-syslog_log_level=ERROR\u001b[0m
    \u001b[37m+syslog_log_level = ERROR\u001b[0m
\u001b[0m  * execute[enable nova login] action run
    \u001b[32m- execute usermod -s /bin/sh nova\u001b[0m
\u001b[0mRecipe: openstack-compute::compute\u001b[0m
  * apt_package[nova-compute] action upgrade
    \u001b[32m- upgrade package nova-compute from uninstalled to 2:13.1.4-0ubuntu4.3\u001b[0m
\u001b[0m  * apt_package[nova-compute-kvm] action upgrade (up to date)
  * apt_package[sysfsutils] action upgrade
    \u001b[32m- upgrade package sysfsutils from uninstalled to 2.1.0+repack-4\u001b[0m
\u001b[0m  * apt_package[sg3-utils] action upgrade (up to date)
  * apt_package[multipath-tools] action upgrade (up to date)
  * cookbook_file[/etc/nova/nova-compute.conf] action create
    \u001b[32m- update content in file /etc/nova/nova-compute.conf from ebf404 to bdff8c\u001b[0m
    \u001b[37m--- /etc/nova/nova-compute.conf\t2018-07-23 10:46:45.000000000 +0000\u001b[0m
    \u001b[37m+++ /etc/nova/.chef-nova-compute20190423-11428-7zhbl.conf\t2019-04-23 15:47:18.801341861 +0000\u001b[0m
    \u001b[37m@@ -1,5 +1,11 @@\u001b[0m
    \u001b[37m-[DEFAULT]\u001b[0m
    \u001b[37m-compute_driver=libvirt.LibvirtDriver\u001b[0m
    \u001b[37m-[libvirt]\u001b[0m
    \u001b[37m-virt_type=kvm\u001b[0m
    \u001b[37m+# This file is automatically generated by Chef.\u001b[0m
    \u001b[37m+# Do not edit. Changes will be overwritten.\u001b[0m
    \u001b[37m+#\u001b[0m
    \u001b[37m+# On ubuntu systems, this file is populated (by the nova-compute package) with:\u001b[0m
    \u001b[37m+#\u001b[0m
    \u001b[37m+# libvirt_type=kvm\u001b[0m
    \u001b[37m+# compute_driver=libvirt.LibvirtDriver\u001b[0m
    \u001b[37m+#\u001b[0m
    \u001b[37m+# In order to properly manage these options in the main nova.conf, we need to\u001b[0m
    \u001b[37m+# replace that file with this empty one.\u001b[0m
    \u001b[32m- change mode from '0600' to '0644'\u001b[0m
\u001b[0m  * directory[/var/lib/nova/instances] action create (up to date)
Recipe: openstack-compute::libvirt\u001b[0m
  * apt_package[libvirt-bin] action upgrade (up to date)
  * apt_package[python-guestfs] action upgrade
    \u001b[32m- upgrade package python-guestfs from uninstalled to 1:1.32.2-4ubuntu2.2\u001b[0m
\u001b[0m  * group[libvirt] action create (skipped due to only_if)
  * link[/usr/bin/qemu-system-x86_64] action create (skipped due to only_if)
  * service[dbus] action enable (up to date)
  * service[dbus] action start (up to date)
  * service[libvirt-bin] action enable (up to date)
  * service[libvirt-bin] action start
    \u001b[32m- start service service[libvirt-bin]\u001b[0m
\u001b[0m  * execute[Deleting default libvirt network] action run
    \u001b[32m- execute virsh net-destroy default\u001b[0m
\u001b[0m  * template[/etc/libvirt/libvirtd.conf] action create
    \u001b[32m- update content in file /etc/libvirt/libvirtd.conf from 782fd6 to c90bfe\u001b[0m
    \u001b[37m--- /etc/libvirt/libvirtd.conf\t2019-03-13 14:49:28.000000000 +0000\u001b[0m
    \u001b[37m+++ /etc/libvirt/.chef-libvirtd20190423-11428-12hwem6.conf\t2019-04-23 15:48:30.783348328 +0000\u001b[0m
    \u001b[37m@@ -1,461 +1,16 @@\u001b[0m
    \u001b[37m-# Master libvirt daemon configuration file\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# For further information consult http://libvirt.org/format.html\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# NOTE: the tests/daemon-conf regression test script requires\u001b[0m
    \u001b[37m-# that each \"PARAMETER = VALUE\" line in this file have the parameter\u001b[0m
    \u001b[37m-# name just after a leading \"#\".\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m-#################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Network connectivity controls\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m+# This file is automatically generated by Chef\u001b[0m
    \u001b[37m+# Any changes will be overwritten\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m-# Flag listening for secure TLS connections on the public TCP/IP port.\u001b[0m
    \u001b[37m-# NB, must pass the --listen flag to the libvirtd process for this to\u001b[0m
    \u001b[37m-# have any effect.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# It is necessary to setup a CA and issue server certificates before\u001b[0m
    \u001b[37m-# using this capability.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# This is enabled by default, uncomment this to disable it\u001b[0m
    \u001b[37m-#listen_tls = 0\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Listen for unencrypted TCP connections on the public TCP/IP port.\u001b[0m
    \u001b[37m-# NB, must pass the --listen flag to the libvirtd process for this to\u001b[0m
    \u001b[37m-# have any effect.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Using the TCP socket requires SASL authentication by default. Only\u001b[0m
    \u001b[37m-# SASL mechanisms which support data encryption are allowed. This is\u001b[0m
    \u001b[37m-# DIGEST_MD5 and GSSAPI (Kerberos5)\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# This is disabled by default, uncomment this to enable it.\u001b[0m
    \u001b[37m-#listen_tcp = 1\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Override the port for accepting secure TLS connections\u001b[0m
    \u001b[37m-# This can be a port number, or service name\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#tls_port = \"16514\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Override the port for accepting insecure TCP connections\u001b[0m
    \u001b[37m-# This can be a port number, or service name\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#tcp_port = \"16509\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Override the default configuration which binds to all network\u001b[0m
    \u001b[37m-# interfaces. This can be a numeric IPv4/6 address, or hostname\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# If the libvirtd service is started in parallel with network\u001b[0m
    \u001b[37m-# startup (e.g. with systemd), binding to addresses other than\u001b[0m
    \u001b[37m-# the wildcards (0.0.0.0/::) might not be available yet.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#listen_addr = \"192.168.0.1\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Flag toggling mDNS advertizement of the libvirt service.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Alternatively can disable for all services on a host by\u001b[0m
    \u001b[37m-# stopping the Avahi daemon\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# This is disabled by default, uncomment this to enable it\u001b[0m
    \u001b[37m-#mdns_adv = 1\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Override the default mDNS advertizement name. This must be\u001b[0m
    \u001b[37m-# unique on the immediate broadcast network.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# The default is \"Virtualization Host HOSTNAME\", where HOSTNAME\u001b[0m
    \u001b[37m-# is substituted for the short hostname of the machine (without domain)\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#mdns_name = \"Virtualization Host Joe Demo\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# UNIX socket access controls\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Beware that if you are changing *any* of these options, and you use\u001b[0m
    \u001b[37m-# socket activation with systemd, you need to adjust the settings in\u001b[0m
    \u001b[37m-# the libvirtd.socket file as well since it could impose a security\u001b[0m
    \u001b[37m-# risk if you rely on file permission checking only.\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Set the UNIX domain socket group ownership. This can be used to\u001b[0m
    \u001b[37m-# allow a 'trusted' set of users access to management capabilities\u001b[0m
    \u001b[37m-# without becoming root.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# This is restricted to 'root' by default.\u001b[0m
    \u001b[37m-unix_sock_group = \"libvirtd\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Set the UNIX socket permissions for the R/O socket. This is used\u001b[0m
    \u001b[37m-# for monitoring VM status only\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Default allows any user. If setting group ownership, you may want to\u001b[0m
    \u001b[37m-# restrict this too.\u001b[0m
    \u001b[37m-unix_sock_ro_perms = \"0777\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Set the UNIX socket permissions for the R/W socket. This is used\u001b[0m
    \u001b[37m-# for full management of VMs\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Default allows only root. If PolicyKit is enabled on the socket,\u001b[0m
    \u001b[37m-# the default will change to allow everyone (eg, 0777)\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# If not using PolicyKit and setting group ownership for access\u001b[0m
    \u001b[37m-# control, then you may want to relax this too.\u001b[0m
    \u001b[37m+listen_tls = 0\u001b[0m
    \u001b[37m+listen_tcp = 1\u001b[0m
    \u001b[37m unix_sock_rw_perms = \"0770\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Set the UNIX socket permissions for the admin interface socket.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Default allows only owner (root), do not change it unless you are\u001b[0m
    \u001b[37m-# sure to whom you are exposing the access to.\u001b[0m
    \u001b[37m-#unix_sock_admin_perms = \"0700\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Set the name of the directory in which sockets will be found/created.\u001b[0m
    \u001b[37m-#unix_sock_dir = \"/var/run/libvirt\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Authentication.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#  - none: do not perform auth checks. If you can connect to the\u001b[0m
    \u001b[37m-#          socket you are allowed. This is suitable if there are\u001b[0m
    \u001b[37m-#          restrictions on connecting to the socket (eg, UNIX\u001b[0m
    \u001b[37m-#          socket permissions), or if there is a lower layer in\u001b[0m
    \u001b[37m-#          the network providing auth (eg, TLS/x509 certificates)\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#  - sasl: use SASL infrastructure. The actual auth scheme is then\u001b[0m
    \u001b[37m-#          controlled from /etc/sasl2/libvirt.conf. For the TCP\u001b[0m
    \u001b[37m-#          socket only GSSAPI & DIGEST-MD5 mechanisms will be used.\u001b[0m
    \u001b[37m-#          For non-TCP or TLS sockets, any scheme is allowed.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#  - polkit: use PolicyKit to authenticate. This is only suitable\u001b[0m
    \u001b[37m-#            for use on the UNIX sockets. The default policy will\u001b[0m
    \u001b[37m-#            require a user to supply their own password to gain\u001b[0m
    \u001b[37m-#            full read/write access (aka sudo like), while anyone\u001b[0m
    \u001b[37m-#            is allowed read/only access.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Set an authentication scheme for UNIX read-only sockets\u001b[0m
    \u001b[37m-# By default socket permissions allow anyone to connect\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# To restrict monitoring of domains you may wish to enable\u001b[0m
    \u001b[37m-# an authentication mechanism here\u001b[0m
    \u001b[37m auth_unix_ro = \"none\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Set an authentication scheme for UNIX read-write sockets\u001b[0m
    \u001b[37m-# By default socket permissions only allow root. If PolicyKit\u001b[0m
    \u001b[37m-# support was compiled into libvirt, the default will be to\u001b[0m
    \u001b[37m-# use 'polkit' auth.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# If the unix_sock_rw_perms are changed you may wish to enable\u001b[0m
    \u001b[37m-# an authentication mechanism here\u001b[0m
    \u001b[37m auth_unix_rw = \"none\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Change the authentication scheme for TCP sockets.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# If you don't enable SASL, then all TCP traffic is cleartext.\u001b[0m
    \u001b[37m-# Don't do this outside of a dev/test scenario. For real world\u001b[0m
    \u001b[37m-# use, always enable SASL and use the GSSAPI or DIGEST-MD5\u001b[0m
    \u001b[37m-# mechanism in /etc/sasl2/libvirt.conf\u001b[0m
    \u001b[37m-#auth_tcp = \"sasl\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Change the authentication scheme for TLS sockets.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# TLS sockets already have encryption provided by the TLS\u001b[0m
    \u001b[37m-# layer, and limited authentication is done by certificates\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# It is possible to make use of any SASL authentication\u001b[0m
    \u001b[37m-# mechanism as well, by using 'sasl' for this option\u001b[0m
    \u001b[37m-#auth_tls = \"none\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Change the API access control scheme\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# By default an authenticated user is allowed access\u001b[0m
    \u001b[37m-# to all APIs. Access drivers can place restrictions\u001b[0m
    \u001b[37m-# on this. By default the 'nop' driver is enabled,\u001b[0m
    \u001b[37m-# meaning no access control checks are done once a\u001b[0m
    \u001b[37m-# client has authenticated with libvirtd\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#access_drivers = [ \"polkit\" ]\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# TLS x509 certificate configuration\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Override the default server key file path\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#key_file = \"/etc/pki/libvirt/private/serverkey.pem\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Override the default server certificate file path\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#cert_file = \"/etc/pki/libvirt/servercert.pem\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Override the default CA certificate path\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#ca_file = \"/etc/pki/CA/cacert.pem\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Specify a certificate revocation list.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Defaults to not using a CRL, uncomment to enable it\u001b[0m
    \u001b[37m-#crl_file = \"/etc/pki/CA/crl.pem\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Authorization controls\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Flag to disable verification of our own server certificates\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# When libvirtd starts it performs some sanity checks against\u001b[0m
    \u001b[37m-# its own certificates.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Default is to always run sanity checks. Uncommenting this\u001b[0m
    \u001b[37m-# will disable sanity checks which is not a good idea\u001b[0m
    \u001b[37m-#tls_no_sanity_certificate = 1\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Flag to disable verification of client certificates\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Client certificate verification is the primary authentication mechanism.\u001b[0m
    \u001b[37m-# Any client which does not present a certificate signed by the CA\u001b[0m
    \u001b[37m-# will be rejected.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Default is to always verify. Uncommenting this will disable\u001b[0m
    \u001b[37m-# verification - make sure an IP whitelist is set\u001b[0m
    \u001b[37m-#tls_no_verify_certificate = 1\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# A whitelist of allowed x509 Distinguished Names\u001b[0m
    \u001b[37m-# This list may contain wildcards such as\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#    \"C=GB,ST=London,L=London,O=Red Hat,CN=*\"\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# See the POSIX fnmatch function for the format of the wildcards.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# NB If this is an empty list, no client can connect, so comment out\u001b[0m
    \u001b[37m-# entirely rather than using empty list to disable these checks\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# By default, no DN's are checked\u001b[0m
    \u001b[37m-#tls_allowed_dn_list = [\"DN1\", \"DN2\"]\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# A whitelist of allowed SASL usernames. The format for usernames\u001b[0m
    \u001b[37m-# depends on the SASL authentication mechanism. Kerberos usernames\u001b[0m
    \u001b[37m-# look like username@REALM\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# This list may contain wildcards such as\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#    \"*@EXAMPLE.COM\"\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# See the POSIX fnmatch function for the format of the wildcards.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# NB If this is an empty list, no client can connect, so comment out\u001b[0m
    \u001b[37m-# entirely rather than using empty list to disable these checks\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# By default, no Username's are checked\u001b[0m
    \u001b[37m-#sasl_allowed_username_list = [\"joe@EXAMPLE.COM\", \"fred@EXAMPLE.COM\" ]\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Processing controls\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# The maximum number of concurrent client connections to allow\u001b[0m
    \u001b[37m-# over all sockets combined.\u001b[0m
    \u001b[37m-#max_clients = 5000\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# The maximum length of queue of connections waiting to be\u001b[0m
    \u001b[37m-# accepted by the daemon. Note, that some protocols supporting\u001b[0m
    \u001b[37m-# retransmission may obey this so that a later reattempt at\u001b[0m
    \u001b[37m-# connection succeeds.\u001b[0m
    \u001b[37m-#max_queued_clients = 1000\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# The maximum length of queue of accepted but not yet\u001b[0m
    \u001b[37m-# authenticated clients. The default value is zero, meaning\u001b[0m
    \u001b[37m-# the feature is disabled.\u001b[0m
    \u001b[37m-#max_anonymous_clients = 20\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# The minimum limit sets the number of workers to start up\u001b[0m
    \u001b[37m-# initially. If the number of active clients exceeds this,\u001b[0m
    \u001b[37m-# then more threads are spawned, up to max_workers limit.\u001b[0m
    \u001b[37m-# Typically you'd want max_workers to equal maximum number\u001b[0m
    \u001b[37m-# of clients allowed\u001b[0m
    \u001b[37m-#min_workers = 5\u001b[0m
    \u001b[37m-#max_workers = 20\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# The number of priority workers. If all workers from above\u001b[0m
    \u001b[37m-# pool are stuck, some calls marked as high priority\u001b[0m
    \u001b[37m-# (notably domainDestroy) can be executed in this pool.\u001b[0m
    \u001b[37m-#prio_workers = 5\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Total global limit on concurrent RPC calls. Should be\u001b[0m
    \u001b[37m-# at least as large as max_workers. Beyond this, RPC requests\u001b[0m
    \u001b[37m-# will be read into memory and queued. This directly impacts\u001b[0m
    \u001b[37m-# memory usage, currently each request requires 256 KB of\u001b[0m
    \u001b[37m-# memory. So by default up to 5 MB of memory is used\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# XXX this isn't actually enforced yet, only the per-client\u001b[0m
    \u001b[37m-# limit is used so far\u001b[0m
    \u001b[37m-#max_requests = 20\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Limit on concurrent requests from a single client\u001b[0m
    \u001b[37m-# connection. To avoid one client monopolizing the server\u001b[0m
    \u001b[37m-# this should be a small fraction of the global max_requests\u001b[0m
    \u001b[37m-# and max_workers parameter\u001b[0m
    \u001b[37m-#max_client_requests = 5\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Same processing controls, but this time for the admin interface.\u001b[0m
    \u001b[37m-# For description of each option, be so kind to scroll few lines\u001b[0m
    \u001b[37m-# upwards.\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#admin_min_workers = 1\u001b[0m
    \u001b[37m-#admin_max_workers = 5\u001b[0m
    \u001b[37m-#admin_max_clients = 5\u001b[0m
    \u001b[37m-#admin_max_queued_clients = 5\u001b[0m
    \u001b[37m-#admin_max_client_requests = 5\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Logging controls\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Logging level: 4 errors, 3 warnings, 2 information, 1 debug\u001b[0m
    \u001b[37m-# basically 1 will log everything possible\u001b[0m
    \u001b[37m-# Note: Journald may employ rate limiting of the messages logged\u001b[0m
    \u001b[37m-# and thus lock up the libvirt daemon. To use the debug level with\u001b[0m
    \u001b[37m-# journald you have to specify it explicitly in 'log_outputs', otherwise\u001b[0m
    \u001b[37m-# only information level messages will be logged.\u001b[0m
    \u001b[37m-#log_level = 3\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Logging filters:\u001b[0m
    \u001b[37m-# A filter allows to select a different logging level for a given category\u001b[0m
    \u001b[37m-# of logs\u001b[0m
    \u001b[37m-# The format for a filter is one of:\u001b[0m
    \u001b[37m-#    x:name\u001b[0m
    \u001b[37m-#    x:+name\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#      where name is a string which is matched against the category\u001b[0m
    \u001b[37m-#      given in the VIR_LOG_INIT() at the top of each libvirt source\u001b[0m
    \u001b[37m-#      file, e.g., \"remote\", \"qemu\", or \"util.json\" (the name in the\u001b[0m
    \u001b[37m-#      filter can be a substring of the full category name, in order\u001b[0m
    \u001b[37m-#      to match multiple similar categories), the optional \"+\" prefix\u001b[0m
    \u001b[37m-#      tells libvirt to log stack trace for each message matching\u001b[0m
    \u001b[37m-#      name, and x is the minimal level where matching messages should\u001b[0m
    \u001b[37m-#      be logged:\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#    1: DEBUG\u001b[0m
    \u001b[37m-#    2: INFO\u001b[0m
    \u001b[37m-#    3: WARNING\u001b[0m
    \u001b[37m-#    4: ERROR\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Multiple filters can be defined in a single @filters, they just need to be\u001b[0m
    \u001b[37m-# separated by spaces.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# e.g. to only get warning or errors from the remote layer and only errors\u001b[0m
    \u001b[37m-# from the event layer:\u001b[0m
    \u001b[37m-#log_filters=\"3:remote 4:event\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Logging outputs:\u001b[0m
    \u001b[37m-# An output is one of the places to save logging information\u001b[0m
    \u001b[37m-# The format for an output can be:\u001b[0m
    \u001b[37m-#    x:stderr\u001b[0m
    \u001b[37m-#      output goes to stderr\u001b[0m
    \u001b[37m-#    x:syslog:name\u001b[0m
    \u001b[37m-#      use syslog for the output and use the given name as the ident\u001b[0m
    \u001b[37m-#    x:file:file_path\u001b[0m
    \u001b[37m-#      output to a file, with the given filepath\u001b[0m
    \u001b[37m-#    x:journald\u001b[0m
    \u001b[37m-#      output to journald logging system\u001b[0m
    \u001b[37m-# In all case the x prefix is the minimal level, acting as a filter\u001b[0m
    \u001b[37m-#    1: DEBUG\u001b[0m
    \u001b[37m-#    2: INFO\u001b[0m
    \u001b[37m-#    3: WARNING\u001b[0m
    \u001b[37m-#    4: ERROR\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Multiple outputs can be defined, they just need to be separated by spaces.\u001b[0m
    \u001b[37m-# e.g. to log all warnings and errors to syslog under the libvirtd ident:\u001b[0m
    \u001b[37m-#log_outputs=\"3:syslog:libvirtd\"\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Log debug buffer size:\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# This configuration option is no longer used, since the global\u001b[0m
    \u001b[37m-# log buffer functionality has been removed. Please configure\u001b[0m
    \u001b[37m-# suitable log_outputs/log_filters settings to obtain logs.\u001b[0m
    \u001b[37m-#log_buffer_size = 64\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-##################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Auditing\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# This setting allows usage of the auditing subsystem to be altered:\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#   audit_level == 0  -> disable all auditing\u001b[0m
    \u001b[37m-#   audit_level == 1  -> enable auditing, only if enabled on host (default)\u001b[0m
    \u001b[37m-#   audit_level == 2  -> enable auditing, and exit if disabled on host\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#audit_level = 2\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# If set to 1, then audit messages will also be sent\u001b[0m
    \u001b[37m-# via libvirt logging infrastructure. Defaults to 0\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#audit_logging = 1\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-###################################################################\u001b[0m
    \u001b[37m-# UUID of the host:\u001b[0m
    \u001b[37m-# Provide the UUID of the host here in case the command\u001b[0m
    \u001b[37m-# 'dmidecode -s system-uuid' does not provide a valid uuid. In case\u001b[0m
    \u001b[37m-# 'dmidecode' does not provide a valid UUID and none is provided here, a\u001b[0m
    \u001b[37m-# temporary UUID will be generated.\u001b[0m
    \u001b[37m-# Keep the format of the example UUID below. UUID must not have all digits\u001b[0m
    \u001b[37m-# be the same.\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# NB This default all-zeros UUID will not work. Replace\u001b[0m
    \u001b[37m-# it with the output of the 'uuidgen' command and then\u001b[0m
    \u001b[37m-# uncomment this entry\u001b[0m
    \u001b[37m-#host_uuid = \"00000000-0000-0000-0000-000000000000\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-###################################################################\u001b[0m
    \u001b[37m-# Keepalive protocol:\u001b[0m
    \u001b[37m-# This allows libvirtd to detect broken client connections or even\u001b[0m
    \u001b[37m-# dead clients.  A keepalive message is sent to a client after\u001b[0m
    \u001b[37m-# keepalive_interval seconds of inactivity to check if the client is\u001b[0m
    \u001b[37m-# still responding; keepalive_count is a maximum number of keepalive\u001b[0m
    \u001b[37m-# messages that are allowed to be sent to the client without getting\u001b[0m
    \u001b[37m-# any response before the connection is considered broken.  In other\u001b[0m
    \u001b[37m-# words, the connection is automatically closed approximately after\u001b[0m
    \u001b[37m-# keepalive_interval * (keepalive_count + 1) seconds since the last\u001b[0m
    \u001b[37m-# message received from the client.  If keepalive_interval is set to\u001b[0m
    \u001b[37m-# -1, libvirtd will never send keepalive requests; however clients\u001b[0m
    \u001b[37m-# can still send them and the daemon will send responses.  When\u001b[0m
    \u001b[37m-# keepalive_count is set to 0, connections will be automatically\u001b[0m
    \u001b[37m-# closed after keepalive_interval seconds of inactivity without\u001b[0m
    \u001b[37m-# sending any keepalive messages.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#keepalive_interval = 5\u001b[0m
    \u001b[37m-#keepalive_count = 5\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# These configuration options are no longer used.  There is no way to\u001b[0m
    \u001b[37m-# restrict such clients from connecting since they first need to\u001b[0m
    \u001b[37m-# connect in order to ask for keepalive.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#keepalive_required = 1\u001b[0m
    \u001b[37m-#admin_keepalive_required = 1\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Keepalive settings for the admin interface\u001b[0m
    \u001b[37m-#admin_keepalive_interval = 5\u001b[0m
    \u001b[37m-#admin_keepalive_count = 5\u001b[0m
    \u001b[37m+auth_tcp = \"none\"\u001b[0m
    \u001b[37m+max_clients = 20\u001b[0m
    \u001b[37m+max_workers = 20\u001b[0m
    \u001b[37m+max_requests = 20\u001b[0m
    \u001b[37m+max_client_requests = 5\u001b[0m
    \u001b[37m+unix_sock_group = 'libvirt'\u001b[0m
\u001b[0m  * service[libvirt-bin] action restart
    \u001b[0m
    ================================================================================\u001b[0m
    \u001b[31mError executing action `restart` on resource 'service[libvirt-bin]'\u001b[0m
    ================================================================================\u001b[0m
    
\u001b[0m    Mixlib::ShellOut::ShellCommandFailed\u001b[0m
    ------------------------------------\u001b[0m
    Expected process to exit with [0], but received '1'
\u001b[0m    ---- Begin output of /bin/systemctl --system restart libvirt-bin ----
\u001b[0m    STDOUT: 
\u001b[0m    STDERR: Job for libvirt-bin.service failed because the control process exited with error code. See \"systemctl status libvirt-bin.service\" and \"journalctl -xe\" for details.
\u001b[0m    ---- End output of /bin/systemctl --system restart libvirt-bin ----
\u001b[0m    Ran /bin/systemctl --system restart libvirt-bin returned 1\u001b[0m
    
\u001b[0m    Resource Declaration:\u001b[0m
    ---------------------\u001b[0m
    # In /root/.chef/local-mode-cache/cache/cookbooks/openstack-compute/recipes/libvirt.rb
\u001b[0m    
\u001b[0m    115: service 'libvirt-bin' do
\u001b[0m    116:   service_name platform_options['libvirt_service']
\u001b[0m    117:   supports status: true, restart: true
\u001b[0m    118:   action [:enable, :start]
\u001b[0m    119: end
\u001b[0m    120: 
\u001b[0m    
\u001b[0m    Compiled Resource:\u001b[0m
    ------------------\u001b[0m
    # Declared in /root/.chef/local-mode-cache/cache/cookbooks/openstack-compute/recipes/libvirt.rb:115:in `from_file'
\u001b[0m    
\u001b[0m    service(\"libvirt-bin\") do
\u001b[0m      action [:enable, :start]
\u001b[0m      updated true
\u001b[0m      default_guard_interpreter :default
\u001b[0m      service_name \"libvirt-bin\"
\u001b[0m      enabled true
\u001b[0m      running true
\u001b[0m      masked false
\u001b[0m      pattern \"libvirt-bin\"
\u001b[0m      declared_type :service
\u001b[0m      cookbook_name \"openstack-compute\"
\u001b[0m      recipe_name \"libvirt\"
\u001b[0m      supports {:status=>true, :restart=>true}
\u001b[0m    end
\u001b[0m    
\u001b[0m    System Info:\u001b[0m
    ------------\u001b[0m
    chef_version=14.4.56
\u001b[0m    platform=ubuntu
\u001b[0m    platform_version=16.04
\u001b[0m    ruby=ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]
\u001b[0m    program_name=/usr/bin/chef-client
\u001b[0m    executable=/opt/chefdk/bin/chef-client\u001b[0m
    
\u001b[0mRecipe: openstack-compute::compute\u001b[0m
  * service[nova-compute] action restart
    \u001b[32m- restart service service[nova-compute]\u001b[0m
\u001b[0m\u001b[0m
Running handlers:\u001b[0m
[2019-04-23T15:48:31+00:00] ERROR: Running exception handlers
Running handlers complete
\u001b[0m[2019-04-23T15:48:31+00:00] ERROR: Exception handlers complete
Chef Client failed. 28 resources updated in 04 minutes 21 seconds\u001b[0m
[2019-04-23T15:48:31+00:00] FATAL: Stacktrace dumped to /root/.chef/local-mode-cache/cache/chef-stacktrace.out
[2019-04-23T15:48:31+00:00] FATAL: Please provide the contents of the stacktrace.out file if you file a bug report
[2019-04-23T15:48:31+00:00] FATAL: Mixlib::ShellOut::ShellCommandFailed: service[libvirt-bin] (openstack-compute::libvirt line 115) had an error: Mixlib::ShellOut::ShellCommandFailed: Expected process to exit with [0], but received '1'
---- Begin output of /bin/systemctl --system restart libvirt-bin ----
STDOUT: 
STDERR: Job for libvirt-bin.service failed because the control process exited with error code. See \"systemctl status libvirt-bin.service\" and \"journalctl -xe\" for details.
---- End output of /bin/systemctl --system restart libvirt-bin ----
Ran /bin/systemctl --system restart libvirt-bin returned 1", "stdout_lines": ["[2019-04-23T15:44:09+00:00] WARN: No config file found or specified on command line, using command line options.", "Starting Chef Client, version 14.4.56\u001b[0m", "resolving cookbooks for run list: [\"build-essential\", \"openstack-common\", \"openstack-compute::compute\", \"openstack-compute::identity_registration\", \"openstack-network::ml2_core_plugin\", \"openstack-network\", \"openstack-network::plugin_config\"]\u001b[0m", "Synchronizing Cookbooks:\u001b[0m", "  - build-essential (8.2.1)\u001b[0m", "  - openstack-common (18.0.0)\u001b[0m", "  - openstack-compute (18.0.0)\u001b[0m", "  - openstack-network (18.0.0)\u001b[0m", "  - seven_zip (3.1.0)\u001b[0m", "  - mingw (2.1.0)\u001b[0m", "  - etcd (5.6.0)\u001b[0m", "  - mariadb (1.5.4)\u001b[0m", "  - memcached (4.1.0)\u001b[0m", "  - mysql (8.5.1)\u001b[0m", "  - poise-python (1.7.0)\u001b[0m", "  - selinux (2.1.1)\u001b[0m", "  - openstack-identity (18.0.0)\u001b[0m", "  - openstack-image (18.0.0)\u001b[0m", "  - openstackclient (18.0.0)\u001b[0m", "  - windows (5.3.0)\u001b[0m", "  - docker (4.9.2)\u001b[0m", "  - apt (7.1.1)\u001b[0m", "  - selinux_policy (2.3.4)\u001b[0m", "  - yum (5.1.0)\u001b[0m", "  - yum-epel (3.3.0)\u001b[0m", "  - yum-scl (0.2.0)\u001b[0m", "  - runit (5.0.1)\u001b[0m", "  - poise (2.8.2)\u001b[0m", "  - poise-languages (2.1.2)\u001b[0m", "  - apache2 (5.0.1)\u001b[0m", "  - inifile_chef_gem (0.1.0)\u001b[0m", "  - packagecloud (1.0.1)\u001b[0m", "  - poise-archive (1.5.0)\u001b[0m", "Installing Cookbook Gems:\u001b[0m", "Compiling Cookbooks...\u001b[0m", "Converging 56 resources\u001b[0m", "Recipe: build-essential::default\u001b[0m", "  * build_essential[install_packages] action install", "    * apt_package[autoconf, binutils-doc, bison, build-essential, flex, gettext, ncurses-dev] action install", "      \u001b[32m- install version 2.69-9 of package autoconf\u001b[0m", "      \u001b[32m- install version 2.26.1-1ubuntu1~16.04.8 of package binutils-doc\u001b[0m", "      \u001b[32m- install version 2:3.0.4.dfsg-1 of package bison\u001b[0m", "      \u001b[32m- install version 2.6.0-11 of package flex\u001b[0m", "      \u001b[32m- install version 0.19.7-2ubuntu3.1 of package gettext\u001b[0m", "      \u001b[32m- install version 6.0+20160213-1ubuntu1 of package ncurses-dev\u001b[0m", "\u001b[0m  ", "\u001b[0mRecipe: openstack-common::default\u001b[0m", "  * apt_update[default] action update", "    \u001b[32m- force update new lists of packages\u001b[0m", "    * directory[/var/lib/apt/periodic] action create (up to date)", "    * directory[/etc/apt/apt.conf.d] action create (up to date)", "    * file[/etc/apt/apt.conf.d/15update-stamp] action create_if_missing", "      \u001b[32m- create new file /etc/apt/apt.conf.d/15update-stamp\u001b[0m", "      \u001b[32m- update content in file /etc/apt/apt.conf.d/15update-stamp from none to 174cdb\u001b[0m", "      \u001b[37m--- /etc/apt/apt.conf.d/15update-stamp\t2019-04-23 15:45:04.925230350 +0000\u001b[0m", "      \u001b[37m+++ /etc/apt/apt.conf.d/.chef-15update-stamp20190423-11428-1r2e0cs\t2019-04-23 15:45:04.925230350 +0000\u001b[0m", "      \u001b[37m@@ -1 +1,2 @@\u001b[0m", "      \u001b[37m+APT::Update::Post-Invoke-Success {\"touch /var/lib/apt/periodic/update-success-stamp 2>/dev/null || true\";};\u001b[0m", "\u001b[0m    * execute[apt-get -q update] action run", "      \u001b[32m- execute [\"apt-get\", \"-q\", \"update\"]\u001b[0m", "\u001b[0m  ", "\u001b[0m  * file[/etc/apt/apt.conf.d/confdef] action create", "    \u001b[32m- create new file /etc/apt/apt.conf.d/confdef\u001b[0m", "    \u001b[32m- update content in file /etc/apt/apt.conf.d/confdef from none to af5564\u001b[0m", "    \u001b[37m--- /etc/apt/apt.conf.d/confdef\t2019-04-23 15:45:06.925422967 +0000\u001b[0m", "    \u001b[37m+++ /etc/apt/apt.conf.d/.chef-confdef20190423-11428-118sv3u\t2019-04-23 15:45:06.925422967 +0000\u001b[0m", "    \u001b[37m@@ -1 +1,5 @@\u001b[0m", "    \u001b[37m+Dpkg::Options {\u001b[0m", "    \u001b[37m+      \"--force-confdef\";\u001b[0m", "    \u001b[37m+      \"--force-confold\";\u001b[0m", "    \u001b[37m+      }\u001b[0m", "    \u001b[32m- change mode from '' to '0644'\u001b[0m", "    \u001b[32m- change owner from '' to 'root'\u001b[0m", "    \u001b[32m- change group from '' to 'root'\u001b[0m", "\u001b[0m  * apt_package[ubuntu-cloud-keyring] action upgrade", "    \u001b[32m- upgrade package ubuntu-cloud-keyring from uninstalled to 2012.08.14\u001b[0m", "\u001b[0m  * python_runtime[2] action install", "    * poise_languages_system[python2.7] action install", "       (up to date)", "    * apt_package[python2.7, python2.7-dev] action nothing (skipped due to action :nothing)", "     (up to date)", "  * python_runtime_pip[2] action install", "    * python_package[pip] action upgrade", "      \u001b[32m- upgrade(allow_downgrade) package pip from 8.1.1 to 18.0\u001b[0m", "\u001b[0m  ", "\u001b[0m  * python_package[setuptools] action install", "    \u001b[32m- install version 40.0.0 of package setuptools\u001b[0m", "\u001b[0m  * python_package[wheel] action install", "    \u001b[32m- install version 0.31.1 of package wheel\u001b[0m", "\u001b[0m  * python_package[virtualenv] action install", "    \u001b[32m- install version 16.4.3 of package virtualenv\u001b[0m", "\u001b[0m", "\u001b[0mRecipe: openstack-compute::nova-common\u001b[0m", "  * apt_package[nova-common] action upgrade", "    \u001b[32m- upgrade package nova-common from uninstalled to 2:13.1.4-0ubuntu4.3\u001b[0m", "\u001b[0m  * apt_package[python-nova] action upgrade (up to date)", "  * apt_package[python-mysqldb] action upgrade", "    \u001b[32m- upgrade package python-mysqldb from uninstalled to 1.3.7-1build2\u001b[0m", "\u001b[0m  * apt_package[python-memcache] action upgrade (up to date)", "  * directory[/etc/nova] action create (up to date)", "  * directory[/var/lib/nova] action create (up to date)", "  * directory[/var/lib/nova/lock] action create", "    \u001b[32m- create new directory /var/lib/nova/lock\u001b[0m", "    \u001b[32m- change mode from '' to '0755'\u001b[0m", "    \u001b[32m- change owner from '' to 'nova'\u001b[0m", "    \u001b[32m- change group from '' to 'nova'\u001b[0m", "\u001b[0m  * template[/etc/nova/nova.conf] action create", "    \u001b[32m- update content in file /etc/nova/nova.conf from 073495 to 075c1d\u001b[0m", "    \u001b[37m--- /etc/nova/nova.conf\t2018-06-27 14:57:19.000000000 +0000\u001b[0m", "    \u001b[37m+++ /etc/nova/.chef-nova20190423-11428-jhhjlf.conf\t2019-04-23 15:46:31.757247341 +0000\u001b[0m", "    \u001b[37m@@ -1,19 +1,92 @@\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+# This file is automatically generated by Chef\u001b[0m", "    \u001b[37m+# Any changes will be overwritten\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m [DEFAULT]\u001b[0m", "    \u001b[37m-dhcpbridge_flagfile=/etc/nova/nova.conf\u001b[0m", "    \u001b[37m-dhcpbridge=/usr/bin/nova-dhcpbridge\u001b[0m", "    \u001b[37m-logdir=/var/log/nova\u001b[0m", "    \u001b[37m-state_path=/var/lib/nova\u001b[0m", "    \u001b[37m-lock_path=/var/lock/nova\u001b[0m", "    \u001b[37m-force_dhcp_release=True\u001b[0m", "    \u001b[37m-libvirt_use_virtio_for_bridges=True\u001b[0m", "    \u001b[37m-verbose=True\u001b[0m", "    \u001b[37m-ec2_private_dns_show_ip=True\u001b[0m", "    \u001b[37m-api_paste_config=/etc/nova/api-paste.ini\u001b[0m", "    \u001b[37m-enabled_apis=ec2,osapi_compute,metadata\u001b[0m", "    \u001b[37m+log_dir = /var/log/nova\u001b[0m", "    \u001b[37m+state_path = /var/lib/nova\u001b[0m", "    \u001b[37m+compute_driver = libvirt.LibvirtDriver\u001b[0m", "    \u001b[37m+auth_version = v3.0\u001b[0m", "    \u001b[37m+instances_path = /var/lib/nova/instances\u001b[0m", "    \u001b[37m+enabled_apis = osapi_compute\u001b[0m", "    \u001b[37m+iscsi_helper = tgtadm\u001b[0m", "    \u001b[37m+metadata_listen = 0.0.0.0\u001b[0m", "    \u001b[37m+metadata_listen_port = 8775\u001b[0m", "    \u001b[37m+transport_url = rabbit://admin:mypass@139.178.70.138:5672/\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m+[keystone_authtoken]\u001b[0m", "    \u001b[37m+auth_type = v3password\u001b[0m", "    \u001b[37m+region_name = RegionOne\u001b[0m", "    \u001b[37m+username = nova\u001b[0m", "    \u001b[37m+user_domain_name = Default\u001b[0m", "    \u001b[37m+project_domain_name = Default\u001b[0m", "    \u001b[37m+project_name = service\u001b[0m", "    \u001b[37m+auth_version = v3\u001b[0m", "    \u001b[37m+service_token_roles_required = true\u001b[0m", "    \u001b[37m+auth_url = http://139.178.70.138:5000/v3\u001b[0m", "    \u001b[37m+www_authenticate_uri = http://139.178.70.138:5000/v3\u001b[0m", "    \u001b[37m+password = mypass\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[libvirt]\u001b[0m", "    \u001b[37m+virt_type = kvm\u001b[0m", "    \u001b[37m+images_type = default\u001b[0m", "    \u001b[37m+cpu_type = passthrough\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[neutron]\u001b[0m", "    \u001b[37m+auth_type = v3password\u001b[0m", "    \u001b[37m+region_name = RegionOne\u001b[0m", "    \u001b[37m+username = neutron\u001b[0m", "    \u001b[37m+user_domain_name = Default\u001b[0m", "    \u001b[37m+service_metadata_proxy = true\u001b[0m", "    \u001b[37m+project_name = service\u001b[0m", "    \u001b[37m+project_domain_name = Default\u001b[0m", "    \u001b[37m+auth_url = http://139.178.70.138:5000/v3\u001b[0m", "    \u001b[37m+password = mypass\u001b[0m", "    \u001b[37m+metadata_proxy_shared_secret = neutron_metadata_secret_token\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[cinder]\u001b[0m", "    \u001b[37m+os_region_name = RegionOne\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[oslo_concurrency]\u001b[0m", "    \u001b[37m+lock_path = /var/lib/nova/lock\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[placement]\u001b[0m", "    \u001b[37m+auth_type = password\u001b[0m", "    \u001b[37m+region_name = RegionOne\u001b[0m", "    \u001b[37m+username = placement\u001b[0m", "    \u001b[37m+user_domain_name = Default\u001b[0m", "    \u001b[37m+project_domain_name = Default\u001b[0m", "    \u001b[37m+project_name = service\u001b[0m", "    \u001b[37m+auth_url = http://139.178.70.138:5000/v3\u001b[0m", "    \u001b[37m+password = mypass\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[scheduler]\u001b[0m", "    \u001b[37m+discover_hosts_in_cells_interval = 300\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[vnc]\u001b[0m", "    \u001b[37m+novncproxy_base_url = http://139.178.70.138:6080/vnc_auto.html\u001b[0m", "    \u001b[37m+xvpvncproxy_base_url = http://127.0.0.1:6081/console\u001b[0m", "    \u001b[37m+xvpvncproxy_host = 127.0.0.1\u001b[0m", "    \u001b[37m+xvpvncproxy_port = 6081\u001b[0m", "    \u001b[37m+novncproxy_host = 0.0.0.0\u001b[0m", "    \u001b[37m+novncproxy_port = 6080\u001b[0m", "    \u001b[37m+server_listen = 127.0.0.1\u001b[0m", "    \u001b[37m+server_proxyclient_address = 127.0.0.1\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[glance]\u001b[0m", "    \u001b[37m+api_servers = http://139.178.70.138:9292\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[serial_console]\u001b[0m", "    \u001b[37m+base_url = ws://127.0.0.1:6083\u001b[0m", "    \u001b[37m+proxyclient_address = 127.0.0.1\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[transport_url]\u001b[0m", "    \u001b[37m+rabbit_host = 139.178.70.138\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m [database]\u001b[0m", "    \u001b[37m-connection=sqlite:////var/lib/nova/nova.sqlite\u001b[0m", "    \u001b[37m+connection = mysql+pymysql://nova:mypass@139.178.70.138:3306/nova?charset=utf8\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m [api_database]\u001b[0m", "    \u001b[37m-connection=sqlite:////var/lib/nova/nova.sqlite\u001b[0m", "    \u001b[37m+connection = mysql+pymysql://nova_api:mypass@139.178.70.138:3306/nova_api?charset=utf8\u001b[0m", "\u001b[0m  * ruby_block[delete all attributes in node['openstack']['compute']['conf_secrets']] action run", "    \u001b[32m- execute the ruby block delete all attributes in node['openstack']['compute']['conf_secrets']\u001b[0m", "\u001b[0m  * template[/etc/nova/rootwrap.conf] action create", "    \u001b[32m- update content in file /etc/nova/rootwrap.conf from 3d44b1 to cbcca9\u001b[0m", "    \u001b[37m--- /etc/nova/rootwrap.conf\t2017-03-22 10:13:52.000000000 +0000\u001b[0m", "    \u001b[37m+++ /etc/nova/.chef-rootwrap20190423-11428-b1tohs.conf\t2019-04-23 15:46:31.797250889 +0000\u001b[0m", "    \u001b[37m@@ -1,28 +1,33 @@\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+# This file is automatically generated by Chef\u001b[0m", "    \u001b[37m+# Any changes will be overwritten\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m # Configuration for nova-rootwrap\u001b[0m", "    \u001b[37m # This file should be owned by (and only-writeable by) the root user\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m [DEFAULT]\u001b[0m", "    \u001b[37m # List of directories to load filter definitions from (separated by ',').\u001b[0m", "    \u001b[37m # These directories MUST all be only writeable by root !\u001b[0m", "    \u001b[37m-filters_path=/etc/nova/rootwrap.d,/usr/share/nova/rootwrap\u001b[0m", "    \u001b[37m+filters_path = /etc/nova/rootwrap.d,/usr/share/nova/rootwrap\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m # List of directories to search executables in, in case filters do not\u001b[0m", "    \u001b[37m-# explicitly specify a full path (separated by ',')\u001b[0m", "    \u001b[37m+# explicitely specify a full path (separated by ',')\u001b[0m", "    \u001b[37m # If not specified, defaults to system PATH environment variable.\u001b[0m", "    \u001b[37m # These directories MUST all be only writeable by root !\u001b[0m", "    \u001b[37m-exec_dirs=/sbin,/usr/sbin,/bin,/usr/bin,/usr/local/sbin,/usr/local/bin\u001b[0m", "    \u001b[37m+exec_dirs = /sbin,/usr/sbin,/bin,/usr/bin\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m # Enable logging to syslog\u001b[0m", "    \u001b[37m # Default value is False\u001b[0m", "    \u001b[37m-use_syslog=False\u001b[0m", "    \u001b[37m+use_syslog = False\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m # Which syslog facility to use.\u001b[0m", "    \u001b[37m # Valid values include auth, authpriv, syslog, local0, local1...\u001b[0m", "    \u001b[37m # Default value is 'syslog'\u001b[0m", "    \u001b[37m-syslog_log_facility=syslog\u001b[0m", "    \u001b[37m+syslog_log_facility = syslog\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m # Which messages to log.\u001b[0m", "    \u001b[37m # INFO means log all usage\u001b[0m", "    \u001b[37m # ERROR means only log unsuccessful attempts\u001b[0m", "    \u001b[37m-syslog_log_level=ERROR\u001b[0m", "    \u001b[37m+syslog_log_level = ERROR\u001b[0m", "\u001b[0m  * execute[enable nova login] action run", "    \u001b[32m- execute usermod -s /bin/sh nova\u001b[0m", "\u001b[0mRecipe: openstack-compute::compute\u001b[0m", "  * apt_package[nova-compute] action upgrade", "    \u001b[32m- upgrade package nova-compute from uninstalled to 2:13.1.4-0ubuntu4.3\u001b[0m", "\u001b[0m  * apt_package[nova-compute-kvm] action upgrade (up to date)", "  * apt_package[sysfsutils] action upgrade", "    \u001b[32m- upgrade package sysfsutils from uninstalled to 2.1.0+repack-4\u001b[0m", "\u001b[0m  * apt_package[sg3-utils] action upgrade (up to date)", "  * apt_package[multipath-tools] action upgrade (up to date)", "  * cookbook_file[/etc/nova/nova-compute.conf] action create", "    \u001b[32m- update content in file /etc/nova/nova-compute.conf from ebf404 to bdff8c\u001b[0m", "    \u001b[37m--- /etc/nova/nova-compute.conf\t2018-07-23 10:46:45.000000000 +0000\u001b[0m", "    \u001b[37m+++ /etc/nova/.chef-nova-compute20190423-11428-7zhbl.conf\t2019-04-23 15:47:18.801341861 +0000\u001b[0m", "    \u001b[37m@@ -1,5 +1,11 @@\u001b[0m", "    \u001b[37m-[DEFAULT]\u001b[0m", "    \u001b[37m-compute_driver=libvirt.LibvirtDriver\u001b[0m", "    \u001b[37m-[libvirt]\u001b[0m", "    \u001b[37m-virt_type=kvm\u001b[0m", "    \u001b[37m+# This file is automatically generated by Chef.\u001b[0m", "    \u001b[37m+# Do not edit. Changes will be overwritten.\u001b[0m", "    \u001b[37m+#\u001b[0m", "    \u001b[37m+# On ubuntu systems, this file is populated (by the nova-compute package) with:\u001b[0m", "    \u001b[37m+#\u001b[0m", "    \u001b[37m+# libvirt_type=kvm\u001b[0m", "    \u001b[37m+# compute_driver=libvirt.LibvirtDriver\u001b[0m", "    \u001b[37m+#\u001b[0m", "    \u001b[37m+# In order to properly manage these options in the main nova.conf, we need to\u001b[0m", "    \u001b[37m+# replace that file with this empty one.\u001b[0m", "    \u001b[32m- change mode from '0600' to '0644'\u001b[0m", "\u001b[0m  * directory[/var/lib/nova/instances] action create (up to date)", "Recipe: openstack-compute::libvirt\u001b[0m", "  * apt_package[libvirt-bin] action upgrade (up to date)", "  * apt_package[python-guestfs] action upgrade", "    \u001b[32m- upgrade package python-guestfs from uninstalled to 1:1.32.2-4ubuntu2.2\u001b[0m", "\u001b[0m  * group[libvirt] action create (skipped due to only_if)", "  * link[/usr/bin/qemu-system-x86_64] action create (skipped due to only_if)", "  * service[dbus] action enable (up to date)", "  * service[dbus] action start (up to date)", "  * service[libvirt-bin] action enable (up to date)", "  * service[libvirt-bin] action start", "    \u001b[32m- start service service[libvirt-bin]\u001b[0m", "\u001b[0m  * execute[Deleting default libvirt network] action run", "    \u001b[32m- execute virsh net-destroy default\u001b[0m", "\u001b[0m  * template[/etc/libvirt/libvirtd.conf] action create", "    \u001b[32m- update content in file /etc/libvirt/libvirtd.conf from 782fd6 to c90bfe\u001b[0m", "    \u001b[37m--- /etc/libvirt/libvirtd.conf\t2019-03-13 14:49:28.000000000 +0000\u001b[0m", "    \u001b[37m+++ /etc/libvirt/.chef-libvirtd20190423-11428-12hwem6.conf\t2019-04-23 15:48:30.783348328 +0000\u001b[0m", "    \u001b[37m@@ -1,461 +1,16 @@\u001b[0m", "    \u001b[37m-# Master libvirt daemon configuration file\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# For further information consult http://libvirt.org/format.html\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# NOTE: the tests/daemon-conf regression test script requires\u001b[0m", "    \u001b[37m-# that each \"PARAMETER = VALUE\" line in this file have the parameter\u001b[0m", "    \u001b[37m-# name just after a leading \"#\".\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m-#################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Network connectivity controls\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m+# This file is automatically generated by Chef\u001b[0m", "    \u001b[37m+# Any changes will be overwritten\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m-# Flag listening for secure TLS connections on the public TCP/IP port.\u001b[0m", "    \u001b[37m-# NB, must pass the --listen flag to the libvirtd process for this to\u001b[0m", "    \u001b[37m-# have any effect.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# It is necessary to setup a CA and issue server certificates before\u001b[0m", "    \u001b[37m-# using this capability.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# This is enabled by default, uncomment this to disable it\u001b[0m", "    \u001b[37m-#listen_tls = 0\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Listen for unencrypted TCP connections on the public TCP/IP port.\u001b[0m", "    \u001b[37m-# NB, must pass the --listen flag to the libvirtd process for this to\u001b[0m", "    \u001b[37m-# have any effect.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Using the TCP socket requires SASL authentication by default. Only\u001b[0m", "    \u001b[37m-# SASL mechanisms which support data encryption are allowed. This is\u001b[0m", "    \u001b[37m-# DIGEST_MD5 and GSSAPI (Kerberos5)\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# This is disabled by default, uncomment this to enable it.\u001b[0m", "    \u001b[37m-#listen_tcp = 1\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Override the port for accepting secure TLS connections\u001b[0m", "    \u001b[37m-# This can be a port number, or service name\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#tls_port = \"16514\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Override the port for accepting insecure TCP connections\u001b[0m", "    \u001b[37m-# This can be a port number, or service name\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#tcp_port = \"16509\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Override the default configuration which binds to all network\u001b[0m", "    \u001b[37m-# interfaces. This can be a numeric IPv4/6 address, or hostname\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# If the libvirtd service is started in parallel with network\u001b[0m", "    \u001b[37m-# startup (e.g. with systemd), binding to addresses other than\u001b[0m", "    \u001b[37m-# the wildcards (0.0.0.0/::) might not be available yet.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#listen_addr = \"192.168.0.1\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Flag toggling mDNS advertizement of the libvirt service.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Alternatively can disable for all services on a host by\u001b[0m", "    \u001b[37m-# stopping the Avahi daemon\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# This is disabled by default, uncomment this to enable it\u001b[0m", "    \u001b[37m-#mdns_adv = 1\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Override the default mDNS advertizement name. This must be\u001b[0m", "    \u001b[37m-# unique on the immediate broadcast network.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# The default is \"Virtualization Host HOSTNAME\", where HOSTNAME\u001b[0m", "    \u001b[37m-# is substituted for the short hostname of the machine (without domain)\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#mdns_name = \"Virtualization Host Joe Demo\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# UNIX socket access controls\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Beware that if you are changing *any* of these options, and you use\u001b[0m", "    \u001b[37m-# socket activation with systemd, you need to adjust the settings in\u001b[0m", "    \u001b[37m-# the libvirtd.socket file as well since it could impose a security\u001b[0m", "    \u001b[37m-# risk if you rely on file permission checking only.\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Set the UNIX domain socket group ownership. This can be used to\u001b[0m", "    \u001b[37m-# allow a 'trusted' set of users access to management capabilities\u001b[0m", "    \u001b[37m-# without becoming root.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# This is restricted to 'root' by default.\u001b[0m", "    \u001b[37m-unix_sock_group = \"libvirtd\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Set the UNIX socket permissions for the R/O socket. This is used\u001b[0m", "    \u001b[37m-# for monitoring VM status only\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Default allows any user. If setting group ownership, you may want to\u001b[0m", "    \u001b[37m-# restrict this too.\u001b[0m", "    \u001b[37m-unix_sock_ro_perms = \"0777\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Set the UNIX socket permissions for the R/W socket. This is used\u001b[0m", "    \u001b[37m-# for full management of VMs\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Default allows only root. If PolicyKit is enabled on the socket,\u001b[0m", "    \u001b[37m-# the default will change to allow everyone (eg, 0777)\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# If not using PolicyKit and setting group ownership for access\u001b[0m", "    \u001b[37m-# control, then you may want to relax this too.\u001b[0m", "    \u001b[37m+listen_tls = 0\u001b[0m", "    \u001b[37m+listen_tcp = 1\u001b[0m", "    \u001b[37m unix_sock_rw_perms = \"0770\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Set the UNIX socket permissions for the admin interface socket.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Default allows only owner (root), do not change it unless you are\u001b[0m", "    \u001b[37m-# sure to whom you are exposing the access to.\u001b[0m", "    \u001b[37m-#unix_sock_admin_perms = \"0700\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Set the name of the directory in which sockets will be found/created.\u001b[0m", "    \u001b[37m-#unix_sock_dir = \"/var/run/libvirt\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Authentication.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#  - none: do not perform auth checks. If you can connect to the\u001b[0m", "    \u001b[37m-#          socket you are allowed. This is suitable if there are\u001b[0m", "    \u001b[37m-#          restrictions on connecting to the socket (eg, UNIX\u001b[0m", "    \u001b[37m-#          socket permissions), or if there is a lower layer in\u001b[0m", "    \u001b[37m-#          the network providing auth (eg, TLS/x509 certificates)\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#  - sasl: use SASL infrastructure. The actual auth scheme is then\u001b[0m", "    \u001b[37m-#          controlled from /etc/sasl2/libvirt.conf. For the TCP\u001b[0m", "    \u001b[37m-#          socket only GSSAPI & DIGEST-MD5 mechanisms will be used.\u001b[0m", "    \u001b[37m-#          For non-TCP or TLS sockets, any scheme is allowed.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#  - polkit: use PolicyKit to authenticate. This is only suitable\u001b[0m", "    \u001b[37m-#            for use on the UNIX sockets. The default policy will\u001b[0m", "    \u001b[37m-#            require a user to supply their own password to gain\u001b[0m", "    \u001b[37m-#            full read/write access (aka sudo like), while anyone\u001b[0m", "    \u001b[37m-#            is allowed read/only access.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Set an authentication scheme for UNIX read-only sockets\u001b[0m", "    \u001b[37m-# By default socket permissions allow anyone to connect\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# To restrict monitoring of domains you may wish to enable\u001b[0m", "    \u001b[37m-# an authentication mechanism here\u001b[0m", "    \u001b[37m auth_unix_ro = \"none\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Set an authentication scheme for UNIX read-write sockets\u001b[0m", "    \u001b[37m-# By default socket permissions only allow root. If PolicyKit\u001b[0m", "    \u001b[37m-# support was compiled into libvirt, the default will be to\u001b[0m", "    \u001b[37m-# use 'polkit' auth.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# If the unix_sock_rw_perms are changed you may wish to enable\u001b[0m", "    \u001b[37m-# an authentication mechanism here\u001b[0m", "    \u001b[37m auth_unix_rw = \"none\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Change the authentication scheme for TCP sockets.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# If you don't enable SASL, then all TCP traffic is cleartext.\u001b[0m", "    \u001b[37m-# Don't do this outside of a dev/test scenario. For real world\u001b[0m", "    \u001b[37m-# use, always enable SASL and use the GSSAPI or DIGEST-MD5\u001b[0m", "    \u001b[37m-# mechanism in /etc/sasl2/libvirt.conf\u001b[0m", "    \u001b[37m-#auth_tcp = \"sasl\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Change the authentication scheme for TLS sockets.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# TLS sockets already have encryption provided by the TLS\u001b[0m", "    \u001b[37m-# layer, and limited authentication is done by certificates\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# It is possible to make use of any SASL authentication\u001b[0m", "    \u001b[37m-# mechanism as well, by using 'sasl' for this option\u001b[0m", "    \u001b[37m-#auth_tls = \"none\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Change the API access control scheme\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# By default an authenticated user is allowed access\u001b[0m", "    \u001b[37m-# to all APIs. Access drivers can place restrictions\u001b[0m", "    \u001b[37m-# on this. By default the 'nop' driver is enabled,\u001b[0m", "    \u001b[37m-# meaning no access control checks are done once a\u001b[0m", "    \u001b[37m-# client has authenticated with libvirtd\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#access_drivers = [ \"polkit\" ]\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# TLS x509 certificate configuration\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Override the default server key file path\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#key_file = \"/etc/pki/libvirt/private/serverkey.pem\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Override the default server certificate file path\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#cert_file = \"/etc/pki/libvirt/servercert.pem\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Override the default CA certificate path\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#ca_file = \"/etc/pki/CA/cacert.pem\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Specify a certificate revocation list.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Defaults to not using a CRL, uncomment to enable it\u001b[0m", "    \u001b[37m-#crl_file = \"/etc/pki/CA/crl.pem\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Authorization controls\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Flag to disable verification of our own server certificates\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# When libvirtd starts it performs some sanity checks against\u001b[0m", "    \u001b[37m-# its own certificates.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Default is to always run sanity checks. Uncommenting this\u001b[0m", "    \u001b[37m-# will disable sanity checks which is not a good idea\u001b[0m", "    \u001b[37m-#tls_no_sanity_certificate = 1\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Flag to disable verification of client certificates\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Client certificate verification is the primary authentication mechanism.\u001b[0m", "    \u001b[37m-# Any client which does not present a certificate signed by the CA\u001b[0m", "    \u001b[37m-# will be rejected.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Default is to always verify. Uncommenting this will disable\u001b[0m", "    \u001b[37m-# verification - make sure an IP whitelist is set\u001b[0m", "    \u001b[37m-#tls_no_verify_certificate = 1\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# A whitelist of allowed x509 Distinguished Names\u001b[0m", "    \u001b[37m-# This list may contain wildcards such as\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#    \"C=GB,ST=London,L=London,O=Red Hat,CN=*\"\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# See the POSIX fnmatch function for the format of the wildcards.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# NB If this is an empty list, no client can connect, so comment out\u001b[0m", "    \u001b[37m-# entirely rather than using empty list to disable these checks\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# By default, no DN's are checked\u001b[0m", "    \u001b[37m-#tls_allowed_dn_list = [\"DN1\", \"DN2\"]\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# A whitelist of allowed SASL usernames. The format for usernames\u001b[0m", "    \u001b[37m-# depends on the SASL authentication mechanism. Kerberos usernames\u001b[0m", "    \u001b[37m-# look like username@REALM\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# This list may contain wildcards such as\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#    \"*@EXAMPLE.COM\"\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# See the POSIX fnmatch function for the format of the wildcards.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# NB If this is an empty list, no client can connect, so comment out\u001b[0m", "    \u001b[37m-# entirely rather than using empty list to disable these checks\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# By default, no Username's are checked\u001b[0m", "    \u001b[37m-#sasl_allowed_username_list = [\"joe@EXAMPLE.COM\", \"fred@EXAMPLE.COM\" ]\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Processing controls\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# The maximum number of concurrent client connections to allow\u001b[0m", "    \u001b[37m-# over all sockets combined.\u001b[0m", "    \u001b[37m-#max_clients = 5000\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# The maximum length of queue of connections waiting to be\u001b[0m", "    \u001b[37m-# accepted by the daemon. Note, that some protocols supporting\u001b[0m", "    \u001b[37m-# retransmission may obey this so that a later reattempt at\u001b[0m", "    \u001b[37m-# connection succeeds.\u001b[0m", "    \u001b[37m-#max_queued_clients = 1000\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# The maximum length of queue of accepted but not yet\u001b[0m", "    \u001b[37m-# authenticated clients. The default value is zero, meaning\u001b[0m", "    \u001b[37m-# the feature is disabled.\u001b[0m", "    \u001b[37m-#max_anonymous_clients = 20\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# The minimum limit sets the number of workers to start up\u001b[0m", "    \u001b[37m-# initially. If the number of active clients exceeds this,\u001b[0m", "    \u001b[37m-# then more threads are spawned, up to max_workers limit.\u001b[0m", "    \u001b[37m-# Typically you'd want max_workers to equal maximum number\u001b[0m", "    \u001b[37m-# of clients allowed\u001b[0m", "    \u001b[37m-#min_workers = 5\u001b[0m", "    \u001b[37m-#max_workers = 20\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# The number of priority workers. If all workers from above\u001b[0m", "    \u001b[37m-# pool are stuck, some calls marked as high priority\u001b[0m", "    \u001b[37m-# (notably domainDestroy) can be executed in this pool.\u001b[0m", "    \u001b[37m-#prio_workers = 5\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Total global limit on concurrent RPC calls. Should be\u001b[0m", "    \u001b[37m-# at least as large as max_workers. Beyond this, RPC requests\u001b[0m", "    \u001b[37m-# will be read into memory and queued. This directly impacts\u001b[0m", "    \u001b[37m-# memory usage, currently each request requires 256 KB of\u001b[0m", "    \u001b[37m-# memory. So by default up to 5 MB of memory is used\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# XXX this isn't actually enforced yet, only the per-client\u001b[0m", "    \u001b[37m-# limit is used so far\u001b[0m", "    \u001b[37m-#max_requests = 20\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Limit on concurrent requests from a single client\u001b[0m", "    \u001b[37m-# connection. To avoid one client monopolizing the server\u001b[0m", "    \u001b[37m-# this should be a small fraction of the global max_requests\u001b[0m", "    \u001b[37m-# and max_workers parameter\u001b[0m", "    \u001b[37m-#max_client_requests = 5\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Same processing controls, but this time for the admin interface.\u001b[0m", "    \u001b[37m-# For description of each option, be so kind to scroll few lines\u001b[0m", "    \u001b[37m-# upwards.\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#admin_min_workers = 1\u001b[0m", "    \u001b[37m-#admin_max_workers = 5\u001b[0m", "    \u001b[37m-#admin_max_clients = 5\u001b[0m", "    \u001b[37m-#admin_max_queued_clients = 5\u001b[0m", "    \u001b[37m-#admin_max_client_requests = 5\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Logging controls\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Logging level: 4 errors, 3 warnings, 2 information, 1 debug\u001b[0m", "    \u001b[37m-# basically 1 will log everything possible\u001b[0m", "    \u001b[37m-# Note: Journald may employ rate limiting of the messages logged\u001b[0m", "    \u001b[37m-# and thus lock up the libvirt daemon. To use the debug level with\u001b[0m", "    \u001b[37m-# journald you have to specify it explicitly in 'log_outputs', otherwise\u001b[0m", "    \u001b[37m-# only information level messages will be logged.\u001b[0m", "    \u001b[37m-#log_level = 3\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Logging filters:\u001b[0m", "    \u001b[37m-# A filter allows to select a different logging level for a given category\u001b[0m", "    \u001b[37m-# of logs\u001b[0m", "    \u001b[37m-# The format for a filter is one of:\u001b[0m", "    \u001b[37m-#    x:name\u001b[0m", "    \u001b[37m-#    x:+name\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#      where name is a string which is matched against the category\u001b[0m", "    \u001b[37m-#      given in the VIR_LOG_INIT() at the top of each libvirt source\u001b[0m", "    \u001b[37m-#      file, e.g., \"remote\", \"qemu\", or \"util.json\" (the name in the\u001b[0m", "    \u001b[37m-#      filter can be a substring of the full category name, in order\u001b[0m", "    \u001b[37m-#      to match multiple similar categories), the optional \"+\" prefix\u001b[0m", "    \u001b[37m-#      tells libvirt to log stack trace for each message matching\u001b[0m", "    \u001b[37m-#      name, and x is the minimal level where matching messages should\u001b[0m", "    \u001b[37m-#      be logged:\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#    1: DEBUG\u001b[0m", "    \u001b[37m-#    2: INFO\u001b[0m", "    \u001b[37m-#    3: WARNING\u001b[0m", "    \u001b[37m-#    4: ERROR\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Multiple filters can be defined in a single @filters, they just need to be\u001b[0m", "    \u001b[37m-# separated by spaces.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# e.g. to only get warning or errors from the remote layer and only errors\u001b[0m", "    \u001b[37m-# from the event layer:\u001b[0m", "    \u001b[37m-#log_filters=\"3:remote 4:event\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Logging outputs:\u001b[0m", "    \u001b[37m-# An output is one of the places to save logging information\u001b[0m", "    \u001b[37m-# The format for an output can be:\u001b[0m", "    \u001b[37m-#    x:stderr\u001b[0m", "    \u001b[37m-#      output goes to stderr\u001b[0m", "    \u001b[37m-#    x:syslog:name\u001b[0m", "    \u001b[37m-#      use syslog for the output and use the given name as the ident\u001b[0m", "    \u001b[37m-#    x:file:file_path\u001b[0m", "    \u001b[37m-#      output to a file, with the given filepath\u001b[0m", "    \u001b[37m-#    x:journald\u001b[0m", "    \u001b[37m-#      output to journald logging system\u001b[0m", "    \u001b[37m-# In all case the x prefix is the minimal level, acting as a filter\u001b[0m", "    \u001b[37m-#    1: DEBUG\u001b[0m", "    \u001b[37m-#    2: INFO\u001b[0m", "    \u001b[37m-#    3: WARNING\u001b[0m", "    \u001b[37m-#    4: ERROR\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Multiple outputs can be defined, they just need to be separated by spaces.\u001b[0m", "    \u001b[37m-# e.g. to log all warnings and errors to syslog under the libvirtd ident:\u001b[0m", "    \u001b[37m-#log_outputs=\"3:syslog:libvirtd\"\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Log debug buffer size:\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# This configuration option is no longer used, since the global\u001b[0m", "    \u001b[37m-# log buffer functionality has been removed. Please configure\u001b[0m", "    \u001b[37m-# suitable log_outputs/log_filters settings to obtain logs.\u001b[0m", "    \u001b[37m-#log_buffer_size = 64\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-##################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Auditing\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# This setting allows usage of the auditing subsystem to be altered:\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#   audit_level == 0  -> disable all auditing\u001b[0m", "    \u001b[37m-#   audit_level == 1  -> enable auditing, only if enabled on host (default)\u001b[0m", "    \u001b[37m-#   audit_level == 2  -> enable auditing, and exit if disabled on host\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#audit_level = 2\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# If set to 1, then audit messages will also be sent\u001b[0m", "    \u001b[37m-# via libvirt logging infrastructure. Defaults to 0\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#audit_logging = 1\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-###################################################################\u001b[0m", "    \u001b[37m-# UUID of the host:\u001b[0m", "    \u001b[37m-# Provide the UUID of the host here in case the command\u001b[0m", "    \u001b[37m-# 'dmidecode -s system-uuid' does not provide a valid uuid. In case\u001b[0m", "    \u001b[37m-# 'dmidecode' does not provide a valid UUID and none is provided here, a\u001b[0m", "    \u001b[37m-# temporary UUID will be generated.\u001b[0m", "    \u001b[37m-# Keep the format of the example UUID below. UUID must not have all digits\u001b[0m", "    \u001b[37m-# be the same.\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# NB This default all-zeros UUID will not work. Replace\u001b[0m", "    \u001b[37m-# it with the output of the 'uuidgen' command and then\u001b[0m", "    \u001b[37m-# uncomment this entry\u001b[0m", "    \u001b[37m-#host_uuid = \"00000000-0000-0000-0000-000000000000\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-###################################################################\u001b[0m", "    \u001b[37m-# Keepalive protocol:\u001b[0m", "    \u001b[37m-# This allows libvirtd to detect broken client connections or even\u001b[0m", "    \u001b[37m-# dead clients.  A keepalive message is sent to a client after\u001b[0m", "    \u001b[37m-# keepalive_interval seconds of inactivity to check if the client is\u001b[0m", "    \u001b[37m-# still responding; keepalive_count is a maximum number of keepalive\u001b[0m", "    \u001b[37m-# messages that are allowed to be sent to the client without getting\u001b[0m", "    \u001b[37m-# any response before the connection is considered broken.  In other\u001b[0m", "    \u001b[37m-# words, the connection is automatically closed approximately after\u001b[0m", "    \u001b[37m-# keepalive_interval * (keepalive_count + 1) seconds since the last\u001b[0m", "    \u001b[37m-# message received from the client.  If keepalive_interval is set to\u001b[0m", "    \u001b[37m-# -1, libvirtd will never send keepalive requests; however clients\u001b[0m", "    \u001b[37m-# can still send them and the daemon will send responses.  When\u001b[0m", "    \u001b[37m-# keepalive_count is set to 0, connections will be automatically\u001b[0m", "    \u001b[37m-# closed after keepalive_interval seconds of inactivity without\u001b[0m", "    \u001b[37m-# sending any keepalive messages.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#keepalive_interval = 5\u001b[0m", "    \u001b[37m-#keepalive_count = 5\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# These configuration options are no longer used.  There is no way to\u001b[0m", "    \u001b[37m-# restrict such clients from connecting since they first need to\u001b[0m", "    \u001b[37m-# connect in order to ask for keepalive.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#keepalive_required = 1\u001b[0m", "    \u001b[37m-#admin_keepalive_required = 1\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Keepalive settings for the admin interface\u001b[0m", "    \u001b[37m-#admin_keepalive_interval = 5\u001b[0m", "    \u001b[37m-#admin_keepalive_count = 5\u001b[0m", "    \u001b[37m+auth_tcp = \"none\"\u001b[0m", "    \u001b[37m+max_clients = 20\u001b[0m", "    \u001b[37m+max_workers = 20\u001b[0m", "    \u001b[37m+max_requests = 20\u001b[0m", "    \u001b[37m+max_client_requests = 5\u001b[0m", "    \u001b[37m+unix_sock_group = 'libvirt'\u001b[0m", "\u001b[0m  * service[libvirt-bin] action restart", "    \u001b[0m", "    ================================================================================\u001b[0m", "    \u001b[31mError executing action `restart` on resource 'service[libvirt-bin]'\u001b[0m", "    ================================================================================\u001b[0m", "    ", "\u001b[0m    Mixlib::ShellOut::ShellCommandFailed\u001b[0m", "    ------------------------------------\u001b[0m", "    Expected process to exit with [0], but received '1'", "\u001b[0m    ---- Begin output of /bin/systemctl --system restart libvirt-bin ----", "\u001b[0m    STDOUT: ", "\u001b[0m    STDERR: Job for libvirt-bin.service failed because the control process exited with error code. See \"systemctl status libvirt-bin.service\" and \"journalctl -xe\" for details.", "\u001b[0m    ---- End output of /bin/systemctl --system restart libvirt-bin ----", "\u001b[0m    Ran /bin/systemctl --system restart libvirt-bin returned 1\u001b[0m", "    ", "\u001b[0m    Resource Declaration:\u001b[0m", "    ---------------------\u001b[0m", "    # In /root/.chef/local-mode-cache/cache/cookbooks/openstack-compute/recipes/libvirt.rb", "\u001b[0m    ", "\u001b[0m    115: service 'libvirt-bin' do", "\u001b[0m    116:   service_name platform_options['libvirt_service']", "\u001b[0m    117:   supports status: true, restart: true", "\u001b[0m    118:   action [:enable, :start]", "\u001b[0m    119: end", "\u001b[0m    120: ", "\u001b[0m    ", "\u001b[0m    Compiled Resource:\u001b[0m", "    ------------------\u001b[0m", "    # Declared in /root/.chef/local-mode-cache/cache/cookbooks/openstack-compute/recipes/libvirt.rb:115:in `from_file'", "\u001b[0m    ", "\u001b[0m    service(\"libvirt-bin\") do", "\u001b[0m      action [:enable, :start]", "\u001b[0m      updated true", "\u001b[0m      default_guard_interpreter :default", "\u001b[0m      service_name \"libvirt-bin\"", "\u001b[0m      enabled true", "\u001b[0m      running true", "\u001b[0m      masked false", "\u001b[0m      pattern \"libvirt-bin\"", "\u001b[0m      declared_type :service", "\u001b[0m      cookbook_name \"openstack-compute\"", "\u001b[0m      recipe_name \"libvirt\"", "\u001b[0m      supports {:status=>true, :restart=>true}", "\u001b[0m    end", "\u001b[0m    ", "\u001b[0m    System Info:\u001b[0m", "    ------------\u001b[0m", "    chef_version=14.4.56", "\u001b[0m    platform=ubuntu", "\u001b[0m    platform_version=16.04", "\u001b[0m    ruby=ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]", "\u001b[0m    program_name=/usr/bin/chef-client", "\u001b[0m    executable=/opt/chefdk/bin/chef-client\u001b[0m", "    ", "\u001b[0mRecipe: openstack-compute::compute\u001b[0m", "  * service[nova-compute] action restart", "    \u001b[32m- restart service service[nova-compute]\u001b[0m", "\u001b[0m\u001b[0m", "Running handlers:\u001b[0m", "[2019-04-23T15:48:31+00:00] ERROR: Running exception handlers", "Running handlers complete", "\u001b[0m[2019-04-23T15:48:31+00:00] ERROR: Exception handlers complete", "Chef Client failed. 28 resources updated in 04 minutes 21 seconds\u001b[0m", "[2019-04-23T15:48:31+00:00] FATAL: Stacktrace dumped to /root/.chef/local-mode-cache/cache/chef-stacktrace.out", "[2019-04-23T15:48:31+00:00] FATAL: Please provide the contents of the stacktrace.out file if you file a bug report", "[2019-04-23T15:48:31+00:00] FATAL: Mixlib::ShellOut::ShellCommandFailed: service[libvirt-bin] (openstack-compute::libvirt line 115) had an error: Mixlib::ShellOut::ShellCommandFailed: Expected process to exit with [0], but received '1'", "---- Begin output of /bin/systemctl --system restart libvirt-bin ----", "STDOUT: ", "STDERR: Job for libvirt-bin.service failed because the control process exited with error code. See \"systemctl status libvirt-bin.service\" and \"journalctl -xe\" for details.", "---- End output of /bin/systemctl --system restart libvirt-bin ----", "Ran /bin/systemctl --system restart libvirt-bin returned 1"]}


---


fatal: [139.178.70.130]: FAILED! => {"changed": true, "cmd": ["chef-client", "-z", "-E", "multinode", "-r", "role[multinode-compute]"], "delta": "0:04:38.581507", "end": "2019-04-23 15:48:46.272463", "msg": "non-zero return code", "rc": 1, "start": "2019-04-23 15:44:07.690956", "stderr": "", "stderr_lines": [], "stdout": "[2019-04-23T15:44:09+00:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 14.4.56\u001b[0m
resolving cookbooks for run list: [\"build-essential\", \"openstack-common\", \"openstack-compute::compute\", \"openstack-compute::identity_registration\", \"openstack-network::ml2_core_plugin\", \"openstack-network\", \"openstack-network::plugin_config\"]\u001b[0m
Synchronizing Cookbooks:\u001b[0m
  - build-essential (8.2.1)\u001b[0m
  - openstack-common (18.0.0)\u001b[0m
  - openstack-compute (18.0.0)\u001b[0m
  - openstack-network (18.0.0)\u001b[0m
  - seven_zip (3.1.0)\u001b[0m
  - mingw (2.1.0)\u001b[0m
  - etcd (5.6.0)\u001b[0m
  - mariadb (1.5.4)\u001b[0m
  - memcached (4.1.0)\u001b[0m
  - mysql (8.5.1)\u001b[0m
  - poise-python (1.7.0)\u001b[0m
  - selinux (2.1.1)\u001b[0m
  - openstack-identity (18.0.0)\u001b[0m
  - openstack-image (18.0.0)\u001b[0m
  - openstackclient (18.0.0)\u001b[0m
  - windows (5.3.0)\u001b[0m
  - docker (4.9.2)\u001b[0m
  - apt (7.1.1)\u001b[0m
  - selinux_policy (2.3.4)\u001b[0m
  - yum (5.1.0)\u001b[0m
  - yum-epel (3.3.0)\u001b[0m
  - yum-scl (0.2.0)\u001b[0m
  - runit (5.0.1)\u001b[0m
  - poise (2.8.2)\u001b[0m
  - poise-languages (2.1.2)\u001b[0m
  - apache2 (5.0.1)\u001b[0m
  - inifile_chef_gem (0.1.0)\u001b[0m
  - packagecloud (1.0.1)\u001b[0m
  - poise-archive (1.5.0)\u001b[0m
Installing Cookbook Gems:\u001b[0m
Compiling Cookbooks...\u001b[0m
Converging 56 resources\u001b[0m
Recipe: build-essential::default\u001b[0m
  * build_essential[install_packages] action install
    * apt_package[autoconf, binutils-doc, bison, build-essential, flex, gettext, ncurses-dev] action install
      \u001b[32m- install version 2.69-9 of package autoconf\u001b[0m
      \u001b[32m- install version 2.26.1-1ubuntu1~16.04.8 of package binutils-doc\u001b[0m
      \u001b[32m- install version 2:3.0.4.dfsg-1 of package bison\u001b[0m
      \u001b[32m- install version 2.6.0-11 of package flex\u001b[0m
      \u001b[32m- install version 0.19.7-2ubuntu3.1 of package gettext\u001b[0m
      \u001b[32m- install version 6.0+20160213-1ubuntu1 of package ncurses-dev\u001b[0m
\u001b[0m  
\u001b[0mRecipe: openstack-common::default\u001b[0m
  * apt_update[default] action update
    \u001b[32m- force update new lists of packages\u001b[0m
    * directory[/var/lib/apt/periodic] action create (up to date)
    * directory[/etc/apt/apt.conf.d] action create (up to date)
    * file[/etc/apt/apt.conf.d/15update-stamp] action create_if_missing
      \u001b[32m- create new file /etc/apt/apt.conf.d/15update-stamp\u001b[0m
      \u001b[32m- update content in file /etc/apt/apt.conf.d/15update-stamp from none to 174cdb\u001b[0m
      \u001b[37m--- /etc/apt/apt.conf.d/15update-stamp\t2019-04-23 15:45:18.639427375 +0000\u001b[0m
      \u001b[37m+++ /etc/apt/apt.conf.d/.chef-15update-stamp20190423-11305-1vrpl9\t2019-04-23 15:45:18.639427375 +0000\u001b[0m
      \u001b[37m@@ -1 +1,2 @@\u001b[0m
      \u001b[37m+APT::Update::Post-Invoke-Success {\"touch /var/lib/apt/periodic/update-success-stamp 2>/dev/null || true\";};\u001b[0m
\u001b[0m    * execute[apt-get -q update] action run
      \u001b[32m- execute [\"apt-get\", \"-q\", \"update\"]\u001b[0m
\u001b[0m  
\u001b[0m  * file[/etc/apt/apt.conf.d/confdef] action create
    \u001b[32m- create new file /etc/apt/apt.conf.d/confdef\u001b[0m
    \u001b[32m- update content in file /etc/apt/apt.conf.d/confdef from none to af5564\u001b[0m
    \u001b[37m--- /etc/apt/apt.conf.d/confdef\t2019-04-23 15:45:20.643587655 +0000\u001b[0m
    \u001b[37m+++ /etc/apt/apt.conf.d/.chef-confdef20190423-11305-rlbcbn\t2019-04-23 15:45:20.643587655 +0000\u001b[0m
    \u001b[37m@@ -1 +1,5 @@\u001b[0m
    \u001b[37m+Dpkg::Options {\u001b[0m
    \u001b[37m+      \"--force-confdef\";\u001b[0m
    \u001b[37m+      \"--force-confold\";\u001b[0m
    \u001b[37m+      }\u001b[0m
    \u001b[32m- change mode from '' to '0644'\u001b[0m
    \u001b[32m- change owner from '' to 'root'\u001b[0m
    \u001b[32m- change group from '' to 'root'\u001b[0m
\u001b[0m  * apt_package[ubuntu-cloud-keyring] action upgrade
    \u001b[32m- upgrade package ubuntu-cloud-keyring from uninstalled to 2012.08.14\u001b[0m
\u001b[0m  * python_runtime[2] action install
    * poise_languages_system[python2.7] action install
       (up to date)
    * apt_package[python2.7, python2.7-dev] action nothing (skipped due to action :nothing)
     (up to date)
  * python_runtime_pip[2] action install
    * python_package[pip] action upgrade
      \u001b[32m- upgrade(allow_downgrade) package pip from 8.1.1 to 18.0\u001b[0m
\u001b[0m  
\u001b[0m  * python_package[setuptools] action install
    \u001b[32m- install version 40.0.0 of package setuptools\u001b[0m
\u001b[0m  * python_package[wheel] action install
    \u001b[32m- install version 0.31.1 of package wheel\u001b[0m
\u001b[0m  * python_package[virtualenv] action install
    \u001b[32m- install version 16.4.3 of package virtualenv\u001b[0m
\u001b[0m
\u001b[0mRecipe: openstack-compute::nova-common\u001b[0m
  * apt_package[nova-common] action upgrade
    \u001b[32m- upgrade package nova-common from uninstalled to 2:13.1.4-0ubuntu4.3\u001b[0m
\u001b[0m  * apt_package[python-nova] action upgrade (up to date)
  * apt_package[python-mysqldb] action upgrade
    \u001b[32m- upgrade package python-mysqldb from uninstalled to 1.3.7-1build2\u001b[0m
\u001b[0m  * apt_package[python-memcache] action upgrade (up to date)
  * directory[/etc/nova] action create (up to date)
  * directory[/var/lib/nova] action create (up to date)
  * directory[/var/lib/nova/lock] action create
    \u001b[32m- create new directory /var/lib/nova/lock\u001b[0m
    \u001b[32m- change mode from '' to '0755'\u001b[0m
    \u001b[32m- change owner from '' to 'nova'\u001b[0m
    \u001b[32m- change group from '' to 'nova'\u001b[0m
\u001b[0m  * template[/etc/nova/nova.conf] action create
    \u001b[32m- update content in file /etc/nova/nova.conf from 073495 to 075c1d\u001b[0m
    \u001b[37m--- /etc/nova/nova.conf\t2018-06-27 14:57:19.000000000 +0000\u001b[0m
    \u001b[37m+++ /etc/nova/.chef-nova20190423-11305-1qosoee.conf\t2019-04-23 15:46:47.126397355 +0000\u001b[0m
    \u001b[37m@@ -1,19 +1,92 @@\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+# This file is automatically generated by Chef\u001b[0m
    \u001b[37m+# Any changes will be overwritten\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m [DEFAULT]\u001b[0m
    \u001b[37m-dhcpbridge_flagfile=/etc/nova/nova.conf\u001b[0m
    \u001b[37m-dhcpbridge=/usr/bin/nova-dhcpbridge\u001b[0m
    \u001b[37m-logdir=/var/log/nova\u001b[0m
    \u001b[37m-state_path=/var/lib/nova\u001b[0m
    \u001b[37m-lock_path=/var/lock/nova\u001b[0m
    \u001b[37m-force_dhcp_release=True\u001b[0m
    \u001b[37m-libvirt_use_virtio_for_bridges=True\u001b[0m
    \u001b[37m-verbose=True\u001b[0m
    \u001b[37m-ec2_private_dns_show_ip=True\u001b[0m
    \u001b[37m-api_paste_config=/etc/nova/api-paste.ini\u001b[0m
    \u001b[37m-enabled_apis=ec2,osapi_compute,metadata\u001b[0m
    \u001b[37m+log_dir = /var/log/nova\u001b[0m
    \u001b[37m+state_path = /var/lib/nova\u001b[0m
    \u001b[37m+compute_driver = libvirt.LibvirtDriver\u001b[0m
    \u001b[37m+auth_version = v3.0\u001b[0m
    \u001b[37m+instances_path = /var/lib/nova/instances\u001b[0m
    \u001b[37m+enabled_apis = osapi_compute\u001b[0m
    \u001b[37m+iscsi_helper = tgtadm\u001b[0m
    \u001b[37m+metadata_listen = 0.0.0.0\u001b[0m
    \u001b[37m+metadata_listen_port = 8775\u001b[0m
    \u001b[37m+transport_url = rabbit://admin:mypass@139.178.70.138:5672/\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m+[keystone_authtoken]\u001b[0m
    \u001b[37m+auth_type = v3password\u001b[0m
    \u001b[37m+region_name = RegionOne\u001b[0m
    \u001b[37m+username = nova\u001b[0m
    \u001b[37m+user_domain_name = Default\u001b[0m
    \u001b[37m+project_domain_name = Default\u001b[0m
    \u001b[37m+project_name = service\u001b[0m
    \u001b[37m+auth_version = v3\u001b[0m
    \u001b[37m+service_token_roles_required = true\u001b[0m
    \u001b[37m+auth_url = http://139.178.70.138:5000/v3\u001b[0m
    \u001b[37m+www_authenticate_uri = http://139.178.70.138:5000/v3\u001b[0m
    \u001b[37m+password = mypass\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[libvirt]\u001b[0m
    \u001b[37m+virt_type = kvm\u001b[0m
    \u001b[37m+images_type = default\u001b[0m
    \u001b[37m+cpu_type = passthrough\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[neutron]\u001b[0m
    \u001b[37m+auth_type = v3password\u001b[0m
    \u001b[37m+region_name = RegionOne\u001b[0m
    \u001b[37m+username = neutron\u001b[0m
    \u001b[37m+user_domain_name = Default\u001b[0m
    \u001b[37m+service_metadata_proxy = true\u001b[0m
    \u001b[37m+project_name = service\u001b[0m
    \u001b[37m+project_domain_name = Default\u001b[0m
    \u001b[37m+auth_url = http://139.178.70.138:5000/v3\u001b[0m
    \u001b[37m+password = mypass\u001b[0m
    \u001b[37m+metadata_proxy_shared_secret = neutron_metadata_secret_token\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[cinder]\u001b[0m
    \u001b[37m+os_region_name = RegionOne\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[oslo_concurrency]\u001b[0m
    \u001b[37m+lock_path = /var/lib/nova/lock\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[placement]\u001b[0m
    \u001b[37m+auth_type = password\u001b[0m
    \u001b[37m+region_name = RegionOne\u001b[0m
    \u001b[37m+username = placement\u001b[0m
    \u001b[37m+user_domain_name = Default\u001b[0m
    \u001b[37m+project_domain_name = Default\u001b[0m
    \u001b[37m+project_name = service\u001b[0m
    \u001b[37m+auth_url = http://139.178.70.138:5000/v3\u001b[0m
    \u001b[37m+password = mypass\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[scheduler]\u001b[0m
    \u001b[37m+discover_hosts_in_cells_interval = 300\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[vnc]\u001b[0m
    \u001b[37m+novncproxy_base_url = http://139.178.70.138:6080/vnc_auto.html\u001b[0m
    \u001b[37m+xvpvncproxy_base_url = http://127.0.0.1:6081/console\u001b[0m
    \u001b[37m+xvpvncproxy_host = 127.0.0.1\u001b[0m
    \u001b[37m+xvpvncproxy_port = 6081\u001b[0m
    \u001b[37m+novncproxy_host = 0.0.0.0\u001b[0m
    \u001b[37m+novncproxy_port = 6080\u001b[0m
    \u001b[37m+server_listen = 127.0.0.1\u001b[0m
    \u001b[37m+server_proxyclient_address = 127.0.0.1\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[glance]\u001b[0m
    \u001b[37m+api_servers = http://139.178.70.138:9292\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[serial_console]\u001b[0m
    \u001b[37m+base_url = ws://127.0.0.1:6083\u001b[0m
    \u001b[37m+proxyclient_address = 127.0.0.1\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+[transport_url]\u001b[0m
    \u001b[37m+rabbit_host = 139.178.70.138\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m [database]\u001b[0m
    \u001b[37m-connection=sqlite:////var/lib/nova/nova.sqlite\u001b[0m
    \u001b[37m+connection = mysql+pymysql://nova:mypass@139.178.70.138:3306/nova?charset=utf8\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m [api_database]\u001b[0m
    \u001b[37m-connection=sqlite:////var/lib/nova/nova.sqlite\u001b[0m
    \u001b[37m+connection = mysql+pymysql://nova_api:mypass@139.178.70.138:3306/nova_api?charset=utf8\u001b[0m
\u001b[0m  * ruby_block[delete all attributes in node['openstack']['compute']['conf_secrets']] action run
    \u001b[32m- execute the ruby block delete all attributes in node['openstack']['compute']['conf_secrets']\u001b[0m
\u001b[0m  * template[/etc/nova/rootwrap.conf] action create
    \u001b[32m- update content in file /etc/nova/rootwrap.conf from 3d44b1 to cbcca9\u001b[0m
    \u001b[37m--- /etc/nova/rootwrap.conf\t2017-03-22 10:13:52.000000000 +0000\u001b[0m
    \u001b[37m+++ /etc/nova/.chef-rootwrap20190423-11305-qb7k4z.conf\t2019-04-23 15:46:47.166400461 +0000\u001b[0m
    \u001b[37m@@ -1,28 +1,33 @@\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+# This file is automatically generated by Chef\u001b[0m
    \u001b[37m+# Any changes will be overwritten\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m+\u001b[0m
    \u001b[37m # Configuration for nova-rootwrap\u001b[0m
    \u001b[37m # This file should be owned by (and only-writeable by) the root user\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m [DEFAULT]\u001b[0m
    \u001b[37m # List of directories to load filter definitions from (separated by ',').\u001b[0m
    \u001b[37m # These directories MUST all be only writeable by root !\u001b[0m
    \u001b[37m-filters_path=/etc/nova/rootwrap.d,/usr/share/nova/rootwrap\u001b[0m
    \u001b[37m+filters_path = /etc/nova/rootwrap.d,/usr/share/nova/rootwrap\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m # List of directories to search executables in, in case filters do not\u001b[0m
    \u001b[37m-# explicitly specify a full path (separated by ',')\u001b[0m
    \u001b[37m+# explicitely specify a full path (separated by ',')\u001b[0m
    \u001b[37m # If not specified, defaults to system PATH environment variable.\u001b[0m
    \u001b[37m # These directories MUST all be only writeable by root !\u001b[0m
    \u001b[37m-exec_dirs=/sbin,/usr/sbin,/bin,/usr/bin,/usr/local/sbin,/usr/local/bin\u001b[0m
    \u001b[37m+exec_dirs = /sbin,/usr/sbin,/bin,/usr/bin\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m # Enable logging to syslog\u001b[0m
    \u001b[37m # Default value is False\u001b[0m
    \u001b[37m-use_syslog=False\u001b[0m
    \u001b[37m+use_syslog = False\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m # Which syslog facility to use.\u001b[0m
    \u001b[37m # Valid values include auth, authpriv, syslog, local0, local1...\u001b[0m
    \u001b[37m # Default value is 'syslog'\u001b[0m
    \u001b[37m-syslog_log_facility=syslog\u001b[0m
    \u001b[37m+syslog_log_facility = syslog\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m # Which messages to log.\u001b[0m
    \u001b[37m # INFO means log all usage\u001b[0m
    \u001b[37m # ERROR means only log unsuccessful attempts\u001b[0m
    \u001b[37m-syslog_log_level=ERROR\u001b[0m
    \u001b[37m+syslog_log_level = ERROR\u001b[0m
\u001b[0m  * execute[enable nova login] action run
    \u001b[32m- execute usermod -s /bin/sh nova\u001b[0m
\u001b[0mRecipe: openstack-compute::compute\u001b[0m
  * apt_package[nova-compute] action upgrade
    \u001b[32m- upgrade package nova-compute from uninstalled to 2:13.1.4-0ubuntu4.3\u001b[0m
\u001b[0m  * apt_package[nova-compute-kvm] action upgrade (up to date)
  * apt_package[sysfsutils] action upgrade
    \u001b[32m- upgrade package sysfsutils from uninstalled to 2.1.0+repack-4\u001b[0m
\u001b[0m  * apt_package[sg3-utils] action upgrade (up to date)
  * apt_package[multipath-tools] action upgrade (up to date)
  * cookbook_file[/etc/nova/nova-compute.conf] action create
    \u001b[32m- update content in file /etc/nova/nova-compute.conf from ebf404 to bdff8c\u001b[0m
    \u001b[37m--- /etc/nova/nova-compute.conf\t2018-07-23 10:46:45.000000000 +0000\u001b[0m
    \u001b[37m+++ /etc/nova/.chef-nova-compute20190423-11305-1ybewrn.conf\t2019-04-23 15:47:34.214031430 +0000\u001b[0m
    \u001b[37m@@ -1,5 +1,11 @@\u001b[0m
    \u001b[37m-[DEFAULT]\u001b[0m
    \u001b[37m-compute_driver=libvirt.LibvirtDriver\u001b[0m
    \u001b[37m-[libvirt]\u001b[0m
    \u001b[37m-virt_type=kvm\u001b[0m
    \u001b[37m+# This file is automatically generated by Chef.\u001b[0m
    \u001b[37m+# Do not edit. Changes will be overwritten.\u001b[0m
    \u001b[37m+#\u001b[0m
    \u001b[37m+# On ubuntu systems, this file is populated (by the nova-compute package) with:\u001b[0m
    \u001b[37m+#\u001b[0m
    \u001b[37m+# libvirt_type=kvm\u001b[0m
    \u001b[37m+# compute_driver=libvirt.LibvirtDriver\u001b[0m
    \u001b[37m+#\u001b[0m
    \u001b[37m+# In order to properly manage these options in the main nova.conf, we need to\u001b[0m
    \u001b[37m+# replace that file with this empty one.\u001b[0m
    \u001b[32m- change mode from '0600' to '0644'\u001b[0m
\u001b[0m  * directory[/var/lib/nova/instances] action create (up to date)
Recipe: openstack-compute::libvirt\u001b[0m
  * apt_package[libvirt-bin] action upgrade (up to date)
  * apt_package[python-guestfs] action upgrade
    \u001b[32m- upgrade package python-guestfs from uninstalled to 1:1.32.2-4ubuntu2.2\u001b[0m
\u001b[0m  * group[libvirt] action create (skipped due to only_if)
  * link[/usr/bin/qemu-system-x86_64] action create (skipped due to only_if)
  * service[dbus] action enable (up to date)
  * service[dbus] action start (up to date)
  * service[libvirt-bin] action enable (up to date)
  * service[libvirt-bin] action start
    \u001b[32m- start service service[libvirt-bin]\u001b[0m
\u001b[0m  * execute[Deleting default libvirt network] action run
    \u001b[32m- execute virsh net-destroy default\u001b[0m
\u001b[0m  * template[/etc/libvirt/libvirtd.conf] action create
    \u001b[32m- update content in file /etc/libvirt/libvirtd.conf from 782fd6 to c90bfe\u001b[0m
    \u001b[37m--- /etc/libvirt/libvirtd.conf\t2019-03-13 14:49:28.000000000 +0000\u001b[0m
    \u001b[37m+++ /etc/libvirt/.chef-libvirtd20190423-11305-11mrgmr.conf\t2019-04-23 15:48:45.947491367 +0000\u001b[0m
    \u001b[37m@@ -1,461 +1,16 @@\u001b[0m
    \u001b[37m-# Master libvirt daemon configuration file\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# For further information consult http://libvirt.org/format.html\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# NOTE: the tests/daemon-conf regression test script requires\u001b[0m
    \u001b[37m-# that each \"PARAMETER = VALUE\" line in this file have the parameter\u001b[0m
    \u001b[37m-# name just after a leading \"#\".\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m-#################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Network connectivity controls\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m+# This file is automatically generated by Chef\u001b[0m
    \u001b[37m+# Any changes will be overwritten\u001b[0m
    \u001b[37m \u001b[0m
    \u001b[37m-# Flag listening for secure TLS connections on the public TCP/IP port.\u001b[0m
    \u001b[37m-# NB, must pass the --listen flag to the libvirtd process for this to\u001b[0m
    \u001b[37m-# have any effect.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# It is necessary to setup a CA and issue server certificates before\u001b[0m
    \u001b[37m-# using this capability.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# This is enabled by default, uncomment this to disable it\u001b[0m
    \u001b[37m-#listen_tls = 0\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Listen for unencrypted TCP connections on the public TCP/IP port.\u001b[0m
    \u001b[37m-# NB, must pass the --listen flag to the libvirtd process for this to\u001b[0m
    \u001b[37m-# have any effect.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Using the TCP socket requires SASL authentication by default. Only\u001b[0m
    \u001b[37m-# SASL mechanisms which support data encryption are allowed. This is\u001b[0m
    \u001b[37m-# DIGEST_MD5 and GSSAPI (Kerberos5)\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# This is disabled by default, uncomment this to enable it.\u001b[0m
    \u001b[37m-#listen_tcp = 1\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Override the port for accepting secure TLS connections\u001b[0m
    \u001b[37m-# This can be a port number, or service name\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#tls_port = \"16514\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Override the port for accepting insecure TCP connections\u001b[0m
    \u001b[37m-# This can be a port number, or service name\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#tcp_port = \"16509\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Override the default configuration which binds to all network\u001b[0m
    \u001b[37m-# interfaces. This can be a numeric IPv4/6 address, or hostname\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# If the libvirtd service is started in parallel with network\u001b[0m
    \u001b[37m-# startup (e.g. with systemd), binding to addresses other than\u001b[0m
    \u001b[37m-# the wildcards (0.0.0.0/::) might not be available yet.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#listen_addr = \"192.168.0.1\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Flag toggling mDNS advertizement of the libvirt service.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Alternatively can disable for all services on a host by\u001b[0m
    \u001b[37m-# stopping the Avahi daemon\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# This is disabled by default, uncomment this to enable it\u001b[0m
    \u001b[37m-#mdns_adv = 1\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Override the default mDNS advertizement name. This must be\u001b[0m
    \u001b[37m-# unique on the immediate broadcast network.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# The default is \"Virtualization Host HOSTNAME\", where HOSTNAME\u001b[0m
    \u001b[37m-# is substituted for the short hostname of the machine (without domain)\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#mdns_name = \"Virtualization Host Joe Demo\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# UNIX socket access controls\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Beware that if you are changing *any* of these options, and you use\u001b[0m
    \u001b[37m-# socket activation with systemd, you need to adjust the settings in\u001b[0m
    \u001b[37m-# the libvirtd.socket file as well since it could impose a security\u001b[0m
    \u001b[37m-# risk if you rely on file permission checking only.\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Set the UNIX domain socket group ownership. This can be used to\u001b[0m
    \u001b[37m-# allow a 'trusted' set of users access to management capabilities\u001b[0m
    \u001b[37m-# without becoming root.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# This is restricted to 'root' by default.\u001b[0m
    \u001b[37m-unix_sock_group = \"libvirtd\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Set the UNIX socket permissions for the R/O socket. This is used\u001b[0m
    \u001b[37m-# for monitoring VM status only\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Default allows any user. If setting group ownership, you may want to\u001b[0m
    \u001b[37m-# restrict this too.\u001b[0m
    \u001b[37m-unix_sock_ro_perms = \"0777\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Set the UNIX socket permissions for the R/W socket. This is used\u001b[0m
    \u001b[37m-# for full management of VMs\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Default allows only root. If PolicyKit is enabled on the socket,\u001b[0m
    \u001b[37m-# the default will change to allow everyone (eg, 0777)\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# If not using PolicyKit and setting group ownership for access\u001b[0m
    \u001b[37m-# control, then you may want to relax this too.\u001b[0m
    \u001b[37m+listen_tls = 0\u001b[0m
    \u001b[37m+listen_tcp = 1\u001b[0m
    \u001b[37m unix_sock_rw_perms = \"0770\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Set the UNIX socket permissions for the admin interface socket.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Default allows only owner (root), do not change it unless you are\u001b[0m
    \u001b[37m-# sure to whom you are exposing the access to.\u001b[0m
    \u001b[37m-#unix_sock_admin_perms = \"0700\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Set the name of the directory in which sockets will be found/created.\u001b[0m
    \u001b[37m-#unix_sock_dir = \"/var/run/libvirt\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Authentication.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#  - none: do not perform auth checks. If you can connect to the\u001b[0m
    \u001b[37m-#          socket you are allowed. This is suitable if there are\u001b[0m
    \u001b[37m-#          restrictions on connecting to the socket (eg, UNIX\u001b[0m
    \u001b[37m-#          socket permissions), or if there is a lower layer in\u001b[0m
    \u001b[37m-#          the network providing auth (eg, TLS/x509 certificates)\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#  - sasl: use SASL infrastructure. The actual auth scheme is then\u001b[0m
    \u001b[37m-#          controlled from /etc/sasl2/libvirt.conf. For the TCP\u001b[0m
    \u001b[37m-#          socket only GSSAPI & DIGEST-MD5 mechanisms will be used.\u001b[0m
    \u001b[37m-#          For non-TCP or TLS sockets, any scheme is allowed.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#  - polkit: use PolicyKit to authenticate. This is only suitable\u001b[0m
    \u001b[37m-#            for use on the UNIX sockets. The default policy will\u001b[0m
    \u001b[37m-#            require a user to supply their own password to gain\u001b[0m
    \u001b[37m-#            full read/write access (aka sudo like), while anyone\u001b[0m
    \u001b[37m-#            is allowed read/only access.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Set an authentication scheme for UNIX read-only sockets\u001b[0m
    \u001b[37m-# By default socket permissions allow anyone to connect\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# To restrict monitoring of domains you may wish to enable\u001b[0m
    \u001b[37m-# an authentication mechanism here\u001b[0m
    \u001b[37m auth_unix_ro = \"none\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Set an authentication scheme for UNIX read-write sockets\u001b[0m
    \u001b[37m-# By default socket permissions only allow root. If PolicyKit\u001b[0m
    \u001b[37m-# support was compiled into libvirt, the default will be to\u001b[0m
    \u001b[37m-# use 'polkit' auth.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# If the unix_sock_rw_perms are changed you may wish to enable\u001b[0m
    \u001b[37m-# an authentication mechanism here\u001b[0m
    \u001b[37m auth_unix_rw = \"none\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Change the authentication scheme for TCP sockets.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# If you don't enable SASL, then all TCP traffic is cleartext.\u001b[0m
    \u001b[37m-# Don't do this outside of a dev/test scenario. For real world\u001b[0m
    \u001b[37m-# use, always enable SASL and use the GSSAPI or DIGEST-MD5\u001b[0m
    \u001b[37m-# mechanism in /etc/sasl2/libvirt.conf\u001b[0m
    \u001b[37m-#auth_tcp = \"sasl\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Change the authentication scheme for TLS sockets.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# TLS sockets already have encryption provided by the TLS\u001b[0m
    \u001b[37m-# layer, and limited authentication is done by certificates\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# It is possible to make use of any SASL authentication\u001b[0m
    \u001b[37m-# mechanism as well, by using 'sasl' for this option\u001b[0m
    \u001b[37m-#auth_tls = \"none\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Change the API access control scheme\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# By default an authenticated user is allowed access\u001b[0m
    \u001b[37m-# to all APIs. Access drivers can place restrictions\u001b[0m
    \u001b[37m-# on this. By default the 'nop' driver is enabled,\u001b[0m
    \u001b[37m-# meaning no access control checks are done once a\u001b[0m
    \u001b[37m-# client has authenticated with libvirtd\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#access_drivers = [ \"polkit\" ]\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# TLS x509 certificate configuration\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Override the default server key file path\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#key_file = \"/etc/pki/libvirt/private/serverkey.pem\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Override the default server certificate file path\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#cert_file = \"/etc/pki/libvirt/servercert.pem\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Override the default CA certificate path\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#ca_file = \"/etc/pki/CA/cacert.pem\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Specify a certificate revocation list.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Defaults to not using a CRL, uncomment to enable it\u001b[0m
    \u001b[37m-#crl_file = \"/etc/pki/CA/crl.pem\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Authorization controls\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Flag to disable verification of our own server certificates\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# When libvirtd starts it performs some sanity checks against\u001b[0m
    \u001b[37m-# its own certificates.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Default is to always run sanity checks. Uncommenting this\u001b[0m
    \u001b[37m-# will disable sanity checks which is not a good idea\u001b[0m
    \u001b[37m-#tls_no_sanity_certificate = 1\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Flag to disable verification of client certificates\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Client certificate verification is the primary authentication mechanism.\u001b[0m
    \u001b[37m-# Any client which does not present a certificate signed by the CA\u001b[0m
    \u001b[37m-# will be rejected.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Default is to always verify. Uncommenting this will disable\u001b[0m
    \u001b[37m-# verification - make sure an IP whitelist is set\u001b[0m
    \u001b[37m-#tls_no_verify_certificate = 1\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# A whitelist of allowed x509 Distinguished Names\u001b[0m
    \u001b[37m-# This list may contain wildcards such as\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#    \"C=GB,ST=London,L=London,O=Red Hat,CN=*\"\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# See the POSIX fnmatch function for the format of the wildcards.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# NB If this is an empty list, no client can connect, so comment out\u001b[0m
    \u001b[37m-# entirely rather than using empty list to disable these checks\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# By default, no DN's are checked\u001b[0m
    \u001b[37m-#tls_allowed_dn_list = [\"DN1\", \"DN2\"]\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# A whitelist of allowed SASL usernames. The format for usernames\u001b[0m
    \u001b[37m-# depends on the SASL authentication mechanism. Kerberos usernames\u001b[0m
    \u001b[37m-# look like username@REALM\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# This list may contain wildcards such as\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#    \"*@EXAMPLE.COM\"\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# See the POSIX fnmatch function for the format of the wildcards.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# NB If this is an empty list, no client can connect, so comment out\u001b[0m
    \u001b[37m-# entirely rather than using empty list to disable these checks\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# By default, no Username's are checked\u001b[0m
    \u001b[37m-#sasl_allowed_username_list = [\"joe@EXAMPLE.COM\", \"fred@EXAMPLE.COM\" ]\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Processing controls\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# The maximum number of concurrent client connections to allow\u001b[0m
    \u001b[37m-# over all sockets combined.\u001b[0m
    \u001b[37m-#max_clients = 5000\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# The maximum length of queue of connections waiting to be\u001b[0m
    \u001b[37m-# accepted by the daemon. Note, that some protocols supporting\u001b[0m
    \u001b[37m-# retransmission may obey this so that a later reattempt at\u001b[0m
    \u001b[37m-# connection succeeds.\u001b[0m
    \u001b[37m-#max_queued_clients = 1000\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# The maximum length of queue of accepted but not yet\u001b[0m
    \u001b[37m-# authenticated clients. The default value is zero, meaning\u001b[0m
    \u001b[37m-# the feature is disabled.\u001b[0m
    \u001b[37m-#max_anonymous_clients = 20\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# The minimum limit sets the number of workers to start up\u001b[0m
    \u001b[37m-# initially. If the number of active clients exceeds this,\u001b[0m
    \u001b[37m-# then more threads are spawned, up to max_workers limit.\u001b[0m
    \u001b[37m-# Typically you'd want max_workers to equal maximum number\u001b[0m
    \u001b[37m-# of clients allowed\u001b[0m
    \u001b[37m-#min_workers = 5\u001b[0m
    \u001b[37m-#max_workers = 20\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# The number of priority workers. If all workers from above\u001b[0m
    \u001b[37m-# pool are stuck, some calls marked as high priority\u001b[0m
    \u001b[37m-# (notably domainDestroy) can be executed in this pool.\u001b[0m
    \u001b[37m-#prio_workers = 5\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Total global limit on concurrent RPC calls. Should be\u001b[0m
    \u001b[37m-# at least as large as max_workers. Beyond this, RPC requests\u001b[0m
    \u001b[37m-# will be read into memory and queued. This directly impacts\u001b[0m
    \u001b[37m-# memory usage, currently each request requires 256 KB of\u001b[0m
    \u001b[37m-# memory. So by default up to 5 MB of memory is used\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# XXX this isn't actually enforced yet, only the per-client\u001b[0m
    \u001b[37m-# limit is used so far\u001b[0m
    \u001b[37m-#max_requests = 20\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Limit on concurrent requests from a single client\u001b[0m
    \u001b[37m-# connection. To avoid one client monopolizing the server\u001b[0m
    \u001b[37m-# this should be a small fraction of the global max_requests\u001b[0m
    \u001b[37m-# and max_workers parameter\u001b[0m
    \u001b[37m-#max_client_requests = 5\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Same processing controls, but this time for the admin interface.\u001b[0m
    \u001b[37m-# For description of each option, be so kind to scroll few lines\u001b[0m
    \u001b[37m-# upwards.\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#admin_min_workers = 1\u001b[0m
    \u001b[37m-#admin_max_workers = 5\u001b[0m
    \u001b[37m-#admin_max_clients = 5\u001b[0m
    \u001b[37m-#admin_max_queued_clients = 5\u001b[0m
    \u001b[37m-#admin_max_client_requests = 5\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Logging controls\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Logging level: 4 errors, 3 warnings, 2 information, 1 debug\u001b[0m
    \u001b[37m-# basically 1 will log everything possible\u001b[0m
    \u001b[37m-# Note: Journald may employ rate limiting of the messages logged\u001b[0m
    \u001b[37m-# and thus lock up the libvirt daemon. To use the debug level with\u001b[0m
    \u001b[37m-# journald you have to specify it explicitly in 'log_outputs', otherwise\u001b[0m
    \u001b[37m-# only information level messages will be logged.\u001b[0m
    \u001b[37m-#log_level = 3\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Logging filters:\u001b[0m
    \u001b[37m-# A filter allows to select a different logging level for a given category\u001b[0m
    \u001b[37m-# of logs\u001b[0m
    \u001b[37m-# The format for a filter is one of:\u001b[0m
    \u001b[37m-#    x:name\u001b[0m
    \u001b[37m-#    x:+name\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#      where name is a string which is matched against the category\u001b[0m
    \u001b[37m-#      given in the VIR_LOG_INIT() at the top of each libvirt source\u001b[0m
    \u001b[37m-#      file, e.g., \"remote\", \"qemu\", or \"util.json\" (the name in the\u001b[0m
    \u001b[37m-#      filter can be a substring of the full category name, in order\u001b[0m
    \u001b[37m-#      to match multiple similar categories), the optional \"+\" prefix\u001b[0m
    \u001b[37m-#      tells libvirt to log stack trace for each message matching\u001b[0m
    \u001b[37m-#      name, and x is the minimal level where matching messages should\u001b[0m
    \u001b[37m-#      be logged:\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#    1: DEBUG\u001b[0m
    \u001b[37m-#    2: INFO\u001b[0m
    \u001b[37m-#    3: WARNING\u001b[0m
    \u001b[37m-#    4: ERROR\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Multiple filters can be defined in a single @filters, they just need to be\u001b[0m
    \u001b[37m-# separated by spaces.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# e.g. to only get warning or errors from the remote layer and only errors\u001b[0m
    \u001b[37m-# from the event layer:\u001b[0m
    \u001b[37m-#log_filters=\"3:remote 4:event\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Logging outputs:\u001b[0m
    \u001b[37m-# An output is one of the places to save logging information\u001b[0m
    \u001b[37m-# The format for an output can be:\u001b[0m
    \u001b[37m-#    x:stderr\u001b[0m
    \u001b[37m-#      output goes to stderr\u001b[0m
    \u001b[37m-#    x:syslog:name\u001b[0m
    \u001b[37m-#      use syslog for the output and use the given name as the ident\u001b[0m
    \u001b[37m-#    x:file:file_path\u001b[0m
    \u001b[37m-#      output to a file, with the given filepath\u001b[0m
    \u001b[37m-#    x:journald\u001b[0m
    \u001b[37m-#      output to journald logging system\u001b[0m
    \u001b[37m-# In all case the x prefix is the minimal level, acting as a filter\u001b[0m
    \u001b[37m-#    1: DEBUG\u001b[0m
    \u001b[37m-#    2: INFO\u001b[0m
    \u001b[37m-#    3: WARNING\u001b[0m
    \u001b[37m-#    4: ERROR\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Multiple outputs can be defined, they just need to be separated by spaces.\u001b[0m
    \u001b[37m-# e.g. to log all warnings and errors to syslog under the libvirtd ident:\u001b[0m
    \u001b[37m-#log_outputs=\"3:syslog:libvirtd\"\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Log debug buffer size:\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# This configuration option is no longer used, since the global\u001b[0m
    \u001b[37m-# log buffer functionality has been removed. Please configure\u001b[0m
    \u001b[37m-# suitable log_outputs/log_filters settings to obtain logs.\u001b[0m
    \u001b[37m-#log_buffer_size = 64\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-##################################################################\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# Auditing\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# This setting allows usage of the auditing subsystem to be altered:\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#   audit_level == 0  -> disable all auditing\u001b[0m
    \u001b[37m-#   audit_level == 1  -> enable auditing, only if enabled on host (default)\u001b[0m
    \u001b[37m-#   audit_level == 2  -> enable auditing, and exit if disabled on host\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#audit_level = 2\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# If set to 1, then audit messages will also be sent\u001b[0m
    \u001b[37m-# via libvirt logging infrastructure. Defaults to 0\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#audit_logging = 1\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-###################################################################\u001b[0m
    \u001b[37m-# UUID of the host:\u001b[0m
    \u001b[37m-# Provide the UUID of the host here in case the command\u001b[0m
    \u001b[37m-# 'dmidecode -s system-uuid' does not provide a valid uuid. In case\u001b[0m
    \u001b[37m-# 'dmidecode' does not provide a valid UUID and none is provided here, a\u001b[0m
    \u001b[37m-# temporary UUID will be generated.\u001b[0m
    \u001b[37m-# Keep the format of the example UUID below. UUID must not have all digits\u001b[0m
    \u001b[37m-# be the same.\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# NB This default all-zeros UUID will not work. Replace\u001b[0m
    \u001b[37m-# it with the output of the 'uuidgen' command and then\u001b[0m
    \u001b[37m-# uncomment this entry\u001b[0m
    \u001b[37m-#host_uuid = \"00000000-0000-0000-0000-000000000000\"\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-###################################################################\u001b[0m
    \u001b[37m-# Keepalive protocol:\u001b[0m
    \u001b[37m-# This allows libvirtd to detect broken client connections or even\u001b[0m
    \u001b[37m-# dead clients.  A keepalive message is sent to a client after\u001b[0m
    \u001b[37m-# keepalive_interval seconds of inactivity to check if the client is\u001b[0m
    \u001b[37m-# still responding; keepalive_count is a maximum number of keepalive\u001b[0m
    \u001b[37m-# messages that are allowed to be sent to the client without getting\u001b[0m
    \u001b[37m-# any response before the connection is considered broken.  In other\u001b[0m
    \u001b[37m-# words, the connection is automatically closed approximately after\u001b[0m
    \u001b[37m-# keepalive_interval * (keepalive_count + 1) seconds since the last\u001b[0m
    \u001b[37m-# message received from the client.  If keepalive_interval is set to\u001b[0m
    \u001b[37m-# -1, libvirtd will never send keepalive requests; however clients\u001b[0m
    \u001b[37m-# can still send them and the daemon will send responses.  When\u001b[0m
    \u001b[37m-# keepalive_count is set to 0, connections will be automatically\u001b[0m
    \u001b[37m-# closed after keepalive_interval seconds of inactivity without\u001b[0m
    \u001b[37m-# sending any keepalive messages.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#keepalive_interval = 5\u001b[0m
    \u001b[37m-#keepalive_count = 5\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-# These configuration options are no longer used.  There is no way to\u001b[0m
    \u001b[37m-# restrict such clients from connecting since they first need to\u001b[0m
    \u001b[37m-# connect in order to ask for keepalive.\u001b[0m
    \u001b[37m-#\u001b[0m
    \u001b[37m-#keepalive_required = 1\u001b[0m
    \u001b[37m-#admin_keepalive_required = 1\u001b[0m
    \u001b[37m-\u001b[0m
    \u001b[37m-# Keepalive settings for the admin interface\u001b[0m
    \u001b[37m-#admin_keepalive_interval = 5\u001b[0m
    \u001b[37m-#admin_keepalive_count = 5\u001b[0m
    \u001b[37m+auth_tcp = \"none\"\u001b[0m
    \u001b[37m+max_clients = 20\u001b[0m
    \u001b[37m+max_workers = 20\u001b[0m
    \u001b[37m+max_requests = 20\u001b[0m
    \u001b[37m+max_client_requests = 5\u001b[0m
    \u001b[37m+unix_sock_group = 'libvirt'\u001b[0m
\u001b[0m  * service[libvirt-bin] action restart
    \u001b[0m
    ================================================================================\u001b[0m
    \u001b[31mError executing action `restart` on resource 'service[libvirt-bin]'\u001b[0m
    ================================================================================\u001b[0m
    
\u001b[0m    Mixlib::ShellOut::ShellCommandFailed\u001b[0m
    ------------------------------------\u001b[0m
    Expected process to exit with [0], but received '1'
\u001b[0m    ---- Begin output of /bin/systemctl --system restart libvirt-bin ----
\u001b[0m    STDOUT: 
\u001b[0m    STDERR: Job for libvirt-bin.service failed because the control process exited with error code. See \"systemctl status libvirt-bin.service\" and \"journalctl -xe\" for details.
\u001b[0m    ---- End output of /bin/systemctl --system restart libvirt-bin ----
\u001b[0m    Ran /bin/systemctl --system restart libvirt-bin returned 1\u001b[0m
    
\u001b[0m    Resource Declaration:\u001b[0m
    ---------------------\u001b[0m
    # In /root/.chef/local-mode-cache/cache/cookbooks/openstack-compute/recipes/libvirt.rb
\u001b[0m    
\u001b[0m    115: service 'libvirt-bin' do
\u001b[0m    116:   service_name platform_options['libvirt_service']
\u001b[0m    117:   supports status: true, restart: true
\u001b[0m    118:   action [:enable, :start]
\u001b[0m    119: end
\u001b[0m    120: 
\u001b[0m    
\u001b[0m    Compiled Resource:\u001b[0m
    ------------------\u001b[0m
    # Declared in /root/.chef/local-mode-cache/cache/cookbooks/openstack-compute/recipes/libvirt.rb:115:in `from_file'
\u001b[0m    
\u001b[0m    service(\"libvirt-bin\") do
\u001b[0m      action [:enable, :start]
\u001b[0m      updated true
\u001b[0m      default_guard_interpreter :default
\u001b[0m      service_name \"libvirt-bin\"
\u001b[0m      enabled true
\u001b[0m      running true
\u001b[0m      masked false
\u001b[0m      pattern \"libvirt-bin\"
\u001b[0m      declared_type :service
\u001b[0m      cookbook_name \"openstack-compute\"
\u001b[0m      recipe_name \"libvirt\"
\u001b[0m      supports {:status=>true, :restart=>true}
\u001b[0m    end
\u001b[0m    
\u001b[0m    System Info:\u001b[0m
    ------------\u001b[0m
    chef_version=14.4.56
\u001b[0m    platform=ubuntu
\u001b[0m    platform_version=16.04
\u001b[0m    ruby=ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]
\u001b[0m    program_name=/usr/bin/chef-client
\u001b[0m    executable=/opt/chefdk/bin/chef-client\u001b[0m
    
\u001b[0mRecipe: openstack-compute::compute\u001b[0m
  * service[nova-compute] action restart
    \u001b[32m- restart service service[nova-compute]\u001b[0m
\u001b[0m\u001b[0m
Running handlers:\u001b[0m
[2019-04-23T15:48:46+00:00] ERROR: Running exception handlers
Running handlers complete
\u001b[0m[2019-04-23T15:48:46+00:00] ERROR: Exception handlers complete
Chef Client failed. 28 resources updated in 04 minutes 36 seconds\u001b[0m
[2019-04-23T15:48:46+00:00] FATAL: Stacktrace dumped to /root/.chef/local-mode-cache/cache/chef-stacktrace.out
[2019-04-23T15:48:46+00:00] FATAL: Please provide the contents of the stacktrace.out file if you file a bug report
[2019-04-23T15:48:46+00:00] FATAL: Mixlib::ShellOut::ShellCommandFailed: service[libvirt-bin] (openstack-compute::libvirt line 115) had an error: Mixlib::ShellOut::ShellCommandFailed: Expected process to exit with [0], but received '1'
---- Begin output of /bin/systemctl --system restart libvirt-bin ----
STDOUT: 
STDERR: Job for libvirt-bin.service failed because the control process exited with error code. See \"systemctl status libvirt-bin.service\" and \"journalctl -xe\" for details.
---- End output of /bin/systemctl --system restart libvirt-bin ----
Ran /bin/systemctl --system restart libvirt-bin returned 1", "stdout_lines": ["[2019-04-23T15:44:09+00:00] WARN: No config file found or specified on command line, using command line options.", "Starting Chef Client, version 14.4.56\u001b[0m", "resolving cookbooks for run list: [\"build-essential\", \"openstack-common\", \"openstack-compute::compute\", \"openstack-compute::identity_registration\", \"openstack-network::ml2_core_plugin\", \"openstack-network\", \"openstack-network::plugin_config\"]\u001b[0m", "Synchronizing Cookbooks:\u001b[0m", "  - build-essential (8.2.1)\u001b[0m", "  - openstack-common (18.0.0)\u001b[0m", "  - openstack-compute (18.0.0)\u001b[0m", "  - openstack-network (18.0.0)\u001b[0m", "  - seven_zip (3.1.0)\u001b[0m", "  - mingw (2.1.0)\u001b[0m", "  - etcd (5.6.0)\u001b[0m", "  - mariadb (1.5.4)\u001b[0m", "  - memcached (4.1.0)\u001b[0m", "  - mysql (8.5.1)\u001b[0m", "  - poise-python (1.7.0)\u001b[0m", "  - selinux (2.1.1)\u001b[0m", "  - openstack-identity (18.0.0)\u001b[0m", "  - openstack-image (18.0.0)\u001b[0m", "  - openstackclient (18.0.0)\u001b[0m", "  - windows (5.3.0)\u001b[0m", "  - docker (4.9.2)\u001b[0m", "  - apt (7.1.1)\u001b[0m", "  - selinux_policy (2.3.4)\u001b[0m", "  - yum (5.1.0)\u001b[0m", "  - yum-epel (3.3.0)\u001b[0m", "  - yum-scl (0.2.0)\u001b[0m", "  - runit (5.0.1)\u001b[0m", "  - poise (2.8.2)\u001b[0m", "  - poise-languages (2.1.2)\u001b[0m", "  - apache2 (5.0.1)\u001b[0m", "  - inifile_chef_gem (0.1.0)\u001b[0m", "  - packagecloud (1.0.1)\u001b[0m", "  - poise-archive (1.5.0)\u001b[0m", "Installing Cookbook Gems:\u001b[0m", "Compiling Cookbooks...\u001b[0m", "Converging 56 resources\u001b[0m", "Recipe: build-essential::default\u001b[0m", "  * build_essential[install_packages] action install", "    * apt_package[autoconf, binutils-doc, bison, build-essential, flex, gettext, ncurses-dev] action install", "      \u001b[32m- install version 2.69-9 of package autoconf\u001b[0m", "      \u001b[32m- install version 2.26.1-1ubuntu1~16.04.8 of package binutils-doc\u001b[0m", "      \u001b[32m- install version 2:3.0.4.dfsg-1 of package bison\u001b[0m", "      \u001b[32m- install version 2.6.0-11 of package flex\u001b[0m", "      \u001b[32m- install version 0.19.7-2ubuntu3.1 of package gettext\u001b[0m", "      \u001b[32m- install version 6.0+20160213-1ubuntu1 of package ncurses-dev\u001b[0m", "\u001b[0m  ", "\u001b[0mRecipe: openstack-common::default\u001b[0m", "  * apt_update[default] action update", "    \u001b[32m- force update new lists of packages\u001b[0m", "    * directory[/var/lib/apt/periodic] action create (up to date)", "    * directory[/etc/apt/apt.conf.d] action create (up to date)", "    * file[/etc/apt/apt.conf.d/15update-stamp] action create_if_missing", "      \u001b[32m- create new file /etc/apt/apt.conf.d/15update-stamp\u001b[0m", "      \u001b[32m- update content in file /etc/apt/apt.conf.d/15update-stamp from none to 174cdb\u001b[0m", "      \u001b[37m--- /etc/apt/apt.conf.d/15update-stamp\t2019-04-23 15:45:18.639427375 +0000\u001b[0m", "      \u001b[37m+++ /etc/apt/apt.conf.d/.chef-15update-stamp20190423-11305-1vrpl9\t2019-04-23 15:45:18.639427375 +0000\u001b[0m", "      \u001b[37m@@ -1 +1,2 @@\u001b[0m", "      \u001b[37m+APT::Update::Post-Invoke-Success {\"touch /var/lib/apt/periodic/update-success-stamp 2>/dev/null || true\";};\u001b[0m", "\u001b[0m    * execute[apt-get -q update] action run", "      \u001b[32m- execute [\"apt-get\", \"-q\", \"update\"]\u001b[0m", "\u001b[0m  ", "\u001b[0m  * file[/etc/apt/apt.conf.d/confdef] action create", "    \u001b[32m- create new file /etc/apt/apt.conf.d/confdef\u001b[0m", "    \u001b[32m- update content in file /etc/apt/apt.conf.d/confdef from none to af5564\u001b[0m", "    \u001b[37m--- /etc/apt/apt.conf.d/confdef\t2019-04-23 15:45:20.643587655 +0000\u001b[0m", "    \u001b[37m+++ /etc/apt/apt.conf.d/.chef-confdef20190423-11305-rlbcbn\t2019-04-23 15:45:20.643587655 +0000\u001b[0m", "    \u001b[37m@@ -1 +1,5 @@\u001b[0m", "    \u001b[37m+Dpkg::Options {\u001b[0m", "    \u001b[37m+      \"--force-confdef\";\u001b[0m", "    \u001b[37m+      \"--force-confold\";\u001b[0m", "    \u001b[37m+      }\u001b[0m", "    \u001b[32m- change mode from '' to '0644'\u001b[0m", "    \u001b[32m- change owner from '' to 'root'\u001b[0m", "    \u001b[32m- change group from '' to 'root'\u001b[0m", "\u001b[0m  * apt_package[ubuntu-cloud-keyring] action upgrade", "    \u001b[32m- upgrade package ubuntu-cloud-keyring from uninstalled to 2012.08.14\u001b[0m", "\u001b[0m  * python_runtime[2] action install", "    * poise_languages_system[python2.7] action install", "       (up to date)", "    * apt_package[python2.7, python2.7-dev] action nothing (skipped due to action :nothing)", "     (up to date)", "  * python_runtime_pip[2] action install", "    * python_package[pip] action upgrade", "      \u001b[32m- upgrade(allow_downgrade) package pip from 8.1.1 to 18.0\u001b[0m", "\u001b[0m  ", "\u001b[0m  * python_package[setuptools] action install", "    \u001b[32m- install version 40.0.0 of package setuptools\u001b[0m", "\u001b[0m  * python_package[wheel] action install", "    \u001b[32m- install version 0.31.1 of package wheel\u001b[0m", "\u001b[0m  * python_package[virtualenv] action install", "    \u001b[32m- install version 16.4.3 of package virtualenv\u001b[0m", "\u001b[0m", "\u001b[0mRecipe: openstack-compute::nova-common\u001b[0m", "  * apt_package[nova-common] action upgrade", "    \u001b[32m- upgrade package nova-common from uninstalled to 2:13.1.4-0ubuntu4.3\u001b[0m", "\u001b[0m  * apt_package[python-nova] action upgrade (up to date)", "  * apt_package[python-mysqldb] action upgrade", "    \u001b[32m- upgrade package python-mysqldb from uninstalled to 1.3.7-1build2\u001b[0m", "\u001b[0m  * apt_package[python-memcache] action upgrade (up to date)", "  * directory[/etc/nova] action create (up to date)", "  * directory[/var/lib/nova] action create (up to date)", "  * directory[/var/lib/nova/lock] action create", "    \u001b[32m- create new directory /var/lib/nova/lock\u001b[0m", "    \u001b[32m- change mode from '' to '0755'\u001b[0m", "    \u001b[32m- change owner from '' to 'nova'\u001b[0m", "    \u001b[32m- change group from '' to 'nova'\u001b[0m", "\u001b[0m  * template[/etc/nova/nova.conf] action create", "    \u001b[32m- update content in file /etc/nova/nova.conf from 073495 to 075c1d\u001b[0m", "    \u001b[37m--- /etc/nova/nova.conf\t2018-06-27 14:57:19.000000000 +0000\u001b[0m", "    \u001b[37m+++ /etc/nova/.chef-nova20190423-11305-1qosoee.conf\t2019-04-23 15:46:47.126397355 +0000\u001b[0m", "    \u001b[37m@@ -1,19 +1,92 @@\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+# This file is automatically generated by Chef\u001b[0m", "    \u001b[37m+# Any changes will be overwritten\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m [DEFAULT]\u001b[0m", "    \u001b[37m-dhcpbridge_flagfile=/etc/nova/nova.conf\u001b[0m", "    \u001b[37m-dhcpbridge=/usr/bin/nova-dhcpbridge\u001b[0m", "    \u001b[37m-logdir=/var/log/nova\u001b[0m", "    \u001b[37m-state_path=/var/lib/nova\u001b[0m", "    \u001b[37m-lock_path=/var/lock/nova\u001b[0m", "    \u001b[37m-force_dhcp_release=True\u001b[0m", "    \u001b[37m-libvirt_use_virtio_for_bridges=True\u001b[0m", "    \u001b[37m-verbose=True\u001b[0m", "    \u001b[37m-ec2_private_dns_show_ip=True\u001b[0m", "    \u001b[37m-api_paste_config=/etc/nova/api-paste.ini\u001b[0m", "    \u001b[37m-enabled_apis=ec2,osapi_compute,metadata\u001b[0m", "    \u001b[37m+log_dir = /var/log/nova\u001b[0m", "    \u001b[37m+state_path = /var/lib/nova\u001b[0m", "    \u001b[37m+compute_driver = libvirt.LibvirtDriver\u001b[0m", "    \u001b[37m+auth_version = v3.0\u001b[0m", "    \u001b[37m+instances_path = /var/lib/nova/instances\u001b[0m", "    \u001b[37m+enabled_apis = osapi_compute\u001b[0m", "    \u001b[37m+iscsi_helper = tgtadm\u001b[0m", "    \u001b[37m+metadata_listen = 0.0.0.0\u001b[0m", "    \u001b[37m+metadata_listen_port = 8775\u001b[0m", "    \u001b[37m+transport_url = rabbit://admin:mypass@139.178.70.138:5672/\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m+[keystone_authtoken]\u001b[0m", "    \u001b[37m+auth_type = v3password\u001b[0m", "    \u001b[37m+region_name = RegionOne\u001b[0m", "    \u001b[37m+username = nova\u001b[0m", "    \u001b[37m+user_domain_name = Default\u001b[0m", "    \u001b[37m+project_domain_name = Default\u001b[0m", "    \u001b[37m+project_name = service\u001b[0m", "    \u001b[37m+auth_version = v3\u001b[0m", "    \u001b[37m+service_token_roles_required = true\u001b[0m", "    \u001b[37m+auth_url = http://139.178.70.138:5000/v3\u001b[0m", "    \u001b[37m+www_authenticate_uri = http://139.178.70.138:5000/v3\u001b[0m", "    \u001b[37m+password = mypass\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[libvirt]\u001b[0m", "    \u001b[37m+virt_type = kvm\u001b[0m", "    \u001b[37m+images_type = default\u001b[0m", "    \u001b[37m+cpu_type = passthrough\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[neutron]\u001b[0m", "    \u001b[37m+auth_type = v3password\u001b[0m", "    \u001b[37m+region_name = RegionOne\u001b[0m", "    \u001b[37m+username = neutron\u001b[0m", "    \u001b[37m+user_domain_name = Default\u001b[0m", "    \u001b[37m+service_metadata_proxy = true\u001b[0m", "    \u001b[37m+project_name = service\u001b[0m", "    \u001b[37m+project_domain_name = Default\u001b[0m", "    \u001b[37m+auth_url = http://139.178.70.138:5000/v3\u001b[0m", "    \u001b[37m+password = mypass\u001b[0m", "    \u001b[37m+metadata_proxy_shared_secret = neutron_metadata_secret_token\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[cinder]\u001b[0m", "    \u001b[37m+os_region_name = RegionOne\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[oslo_concurrency]\u001b[0m", "    \u001b[37m+lock_path = /var/lib/nova/lock\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[placement]\u001b[0m", "    \u001b[37m+auth_type = password\u001b[0m", "    \u001b[37m+region_name = RegionOne\u001b[0m", "    \u001b[37m+username = placement\u001b[0m", "    \u001b[37m+user_domain_name = Default\u001b[0m", "    \u001b[37m+project_domain_name = Default\u001b[0m", "    \u001b[37m+project_name = service\u001b[0m", "    \u001b[37m+auth_url = http://139.178.70.138:5000/v3\u001b[0m", "    \u001b[37m+password = mypass\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[scheduler]\u001b[0m", "    \u001b[37m+discover_hosts_in_cells_interval = 300\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[vnc]\u001b[0m", "    \u001b[37m+novncproxy_base_url = http://139.178.70.138:6080/vnc_auto.html\u001b[0m", "    \u001b[37m+xvpvncproxy_base_url = http://127.0.0.1:6081/console\u001b[0m", "    \u001b[37m+xvpvncproxy_host = 127.0.0.1\u001b[0m", "    \u001b[37m+xvpvncproxy_port = 6081\u001b[0m", "    \u001b[37m+novncproxy_host = 0.0.0.0\u001b[0m", "    \u001b[37m+novncproxy_port = 6080\u001b[0m", "    \u001b[37m+server_listen = 127.0.0.1\u001b[0m", "    \u001b[37m+server_proxyclient_address = 127.0.0.1\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[glance]\u001b[0m", "    \u001b[37m+api_servers = http://139.178.70.138:9292\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[serial_console]\u001b[0m", "    \u001b[37m+base_url = ws://127.0.0.1:6083\u001b[0m", "    \u001b[37m+proxyclient_address = 127.0.0.1\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+[transport_url]\u001b[0m", "    \u001b[37m+rabbit_host = 139.178.70.138\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m [database]\u001b[0m", "    \u001b[37m-connection=sqlite:////var/lib/nova/nova.sqlite\u001b[0m", "    \u001b[37m+connection = mysql+pymysql://nova:mypass@139.178.70.138:3306/nova?charset=utf8\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m [api_database]\u001b[0m", "    \u001b[37m-connection=sqlite:////var/lib/nova/nova.sqlite\u001b[0m", "    \u001b[37m+connection = mysql+pymysql://nova_api:mypass@139.178.70.138:3306/nova_api?charset=utf8\u001b[0m", "\u001b[0m  * ruby_block[delete all attributes in node['openstack']['compute']['conf_secrets']] action run", "    \u001b[32m- execute the ruby block delete all attributes in node['openstack']['compute']['conf_secrets']\u001b[0m", "\u001b[0m  * template[/etc/nova/rootwrap.conf] action create", "    \u001b[32m- update content in file /etc/nova/rootwrap.conf from 3d44b1 to cbcca9\u001b[0m", "    \u001b[37m--- /etc/nova/rootwrap.conf\t2017-03-22 10:13:52.000000000 +0000\u001b[0m", "    \u001b[37m+++ /etc/nova/.chef-rootwrap20190423-11305-qb7k4z.conf\t2019-04-23 15:46:47.166400461 +0000\u001b[0m", "    \u001b[37m@@ -1,28 +1,33 @@\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+# This file is automatically generated by Chef\u001b[0m", "    \u001b[37m+# Any changes will be overwritten\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m+\u001b[0m", "    \u001b[37m # Configuration for nova-rootwrap\u001b[0m", "    \u001b[37m # This file should be owned by (and only-writeable by) the root user\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m [DEFAULT]\u001b[0m", "    \u001b[37m # List of directories to load filter definitions from (separated by ',').\u001b[0m", "    \u001b[37m # These directories MUST all be only writeable by root !\u001b[0m", "    \u001b[37m-filters_path=/etc/nova/rootwrap.d,/usr/share/nova/rootwrap\u001b[0m", "    \u001b[37m+filters_path = /etc/nova/rootwrap.d,/usr/share/nova/rootwrap\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m # List of directories to search executables in, in case filters do not\u001b[0m", "    \u001b[37m-# explicitly specify a full path (separated by ',')\u001b[0m", "    \u001b[37m+# explicitely specify a full path (separated by ',')\u001b[0m", "    \u001b[37m # If not specified, defaults to system PATH environment variable.\u001b[0m", "    \u001b[37m # These directories MUST all be only writeable by root !\u001b[0m", "    \u001b[37m-exec_dirs=/sbin,/usr/sbin,/bin,/usr/bin,/usr/local/sbin,/usr/local/bin\u001b[0m", "    \u001b[37m+exec_dirs = /sbin,/usr/sbin,/bin,/usr/bin\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m # Enable logging to syslog\u001b[0m", "    \u001b[37m # Default value is False\u001b[0m", "    \u001b[37m-use_syslog=False\u001b[0m", "    \u001b[37m+use_syslog = False\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m # Which syslog facility to use.\u001b[0m", "    \u001b[37m # Valid values include auth, authpriv, syslog, local0, local1...\u001b[0m", "    \u001b[37m # Default value is 'syslog'\u001b[0m", "    \u001b[37m-syslog_log_facility=syslog\u001b[0m", "    \u001b[37m+syslog_log_facility = syslog\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m # Which messages to log.\u001b[0m", "    \u001b[37m # INFO means log all usage\u001b[0m", "    \u001b[37m # ERROR means only log unsuccessful attempts\u001b[0m", "    \u001b[37m-syslog_log_level=ERROR\u001b[0m", "    \u001b[37m+syslog_log_level = ERROR\u001b[0m", "\u001b[0m  * execute[enable nova login] action run", "    \u001b[32m- execute usermod -s /bin/sh nova\u001b[0m", "\u001b[0mRecipe: openstack-compute::compute\u001b[0m", "  * apt_package[nova-compute] action upgrade", "    \u001b[32m- upgrade package nova-compute from uninstalled to 2:13.1.4-0ubuntu4.3\u001b[0m", "\u001b[0m  * apt_package[nova-compute-kvm] action upgrade (up to date)", "  * apt_package[sysfsutils] action upgrade", "    \u001b[32m- upgrade package sysfsutils from uninstalled to 2.1.0+repack-4\u001b[0m", "\u001b[0m  * apt_package[sg3-utils] action upgrade (up to date)", "  * apt_package[multipath-tools] action upgrade (up to date)", "  * cookbook_file[/etc/nova/nova-compute.conf] action create", "    \u001b[32m- update content in file /etc/nova/nova-compute.conf from ebf404 to bdff8c\u001b[0m", "    \u001b[37m--- /etc/nova/nova-compute.conf\t2018-07-23 10:46:45.000000000 +0000\u001b[0m", "    \u001b[37m+++ /etc/nova/.chef-nova-compute20190423-11305-1ybewrn.conf\t2019-04-23 15:47:34.214031430 +0000\u001b[0m", "    \u001b[37m@@ -1,5 +1,11 @@\u001b[0m", "    \u001b[37m-[DEFAULT]\u001b[0m", "    \u001b[37m-compute_driver=libvirt.LibvirtDriver\u001b[0m", "    \u001b[37m-[libvirt]\u001b[0m", "    \u001b[37m-virt_type=kvm\u001b[0m", "    \u001b[37m+# This file is automatically generated by Chef.\u001b[0m", "    \u001b[37m+# Do not edit. Changes will be overwritten.\u001b[0m", "    \u001b[37m+#\u001b[0m", "    \u001b[37m+# On ubuntu systems, this file is populated (by the nova-compute package) with:\u001b[0m", "    \u001b[37m+#\u001b[0m", "    \u001b[37m+# libvirt_type=kvm\u001b[0m", "    \u001b[37m+# compute_driver=libvirt.LibvirtDriver\u001b[0m", "    \u001b[37m+#\u001b[0m", "    \u001b[37m+# In order to properly manage these options in the main nova.conf, we need to\u001b[0m", "    \u001b[37m+# replace that file with this empty one.\u001b[0m", "    \u001b[32m- change mode from '0600' to '0644'\u001b[0m", "\u001b[0m  * directory[/var/lib/nova/instances] action create (up to date)", "Recipe: openstack-compute::libvirt\u001b[0m", "  * apt_package[libvirt-bin] action upgrade (up to date)", "  * apt_package[python-guestfs] action upgrade", "    \u001b[32m- upgrade package python-guestfs from uninstalled to 1:1.32.2-4ubuntu2.2\u001b[0m", "\u001b[0m  * group[libvirt] action create (skipped due to only_if)", "  * link[/usr/bin/qemu-system-x86_64] action create (skipped due to only_if)", "  * service[dbus] action enable (up to date)", "  * service[dbus] action start (up to date)", "  * service[libvirt-bin] action enable (up to date)", "  * service[libvirt-bin] action start", "    \u001b[32m- start service service[libvirt-bin]\u001b[0m", "\u001b[0m  * execute[Deleting default libvirt network] action run", "    \u001b[32m- execute virsh net-destroy default\u001b[0m", "\u001b[0m  * template[/etc/libvirt/libvirtd.conf] action create", "    \u001b[32m- update content in file /etc/libvirt/libvirtd.conf from 782fd6 to c90bfe\u001b[0m", "    \u001b[37m--- /etc/libvirt/libvirtd.conf\t2019-03-13 14:49:28.000000000 +0000\u001b[0m", "    \u001b[37m+++ /etc/libvirt/.chef-libvirtd20190423-11305-11mrgmr.conf\t2019-04-23 15:48:45.947491367 +0000\u001b[0m", "    \u001b[37m@@ -1,461 +1,16 @@\u001b[0m", "    \u001b[37m-# Master libvirt daemon configuration file\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# For further information consult http://libvirt.org/format.html\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# NOTE: the tests/daemon-conf regression test script requires\u001b[0m", "    \u001b[37m-# that each \"PARAMETER = VALUE\" line in this file have the parameter\u001b[0m", "    \u001b[37m-# name just after a leading \"#\".\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m-#################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Network connectivity controls\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m+# This file is automatically generated by Chef\u001b[0m", "    \u001b[37m+# Any changes will be overwritten\u001b[0m", "    \u001b[37m \u001b[0m", "    \u001b[37m-# Flag listening for secure TLS connections on the public TCP/IP port.\u001b[0m", "    \u001b[37m-# NB, must pass the --listen flag to the libvirtd process for this to\u001b[0m", "    \u001b[37m-# have any effect.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# It is necessary to setup a CA and issue server certificates before\u001b[0m", "    \u001b[37m-# using this capability.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# This is enabled by default, uncomment this to disable it\u001b[0m", "    \u001b[37m-#listen_tls = 0\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Listen for unencrypted TCP connections on the public TCP/IP port.\u001b[0m", "    \u001b[37m-# NB, must pass the --listen flag to the libvirtd process for this to\u001b[0m", "    \u001b[37m-# have any effect.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Using the TCP socket requires SASL authentication by default. Only\u001b[0m", "    \u001b[37m-# SASL mechanisms which support data encryption are allowed. This is\u001b[0m", "    \u001b[37m-# DIGEST_MD5 and GSSAPI (Kerberos5)\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# This is disabled by default, uncomment this to enable it.\u001b[0m", "    \u001b[37m-#listen_tcp = 1\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Override the port for accepting secure TLS connections\u001b[0m", "    \u001b[37m-# This can be a port number, or service name\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#tls_port = \"16514\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Override the port for accepting insecure TCP connections\u001b[0m", "    \u001b[37m-# This can be a port number, or service name\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#tcp_port = \"16509\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Override the default configuration which binds to all network\u001b[0m", "    \u001b[37m-# interfaces. This can be a numeric IPv4/6 address, or hostname\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# If the libvirtd service is started in parallel with network\u001b[0m", "    \u001b[37m-# startup (e.g. with systemd), binding to addresses other than\u001b[0m", "    \u001b[37m-# the wildcards (0.0.0.0/::) might not be available yet.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#listen_addr = \"192.168.0.1\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Flag toggling mDNS advertizement of the libvirt service.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Alternatively can disable for all services on a host by\u001b[0m", "    \u001b[37m-# stopping the Avahi daemon\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# This is disabled by default, uncomment this to enable it\u001b[0m", "    \u001b[37m-#mdns_adv = 1\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Override the default mDNS advertizement name. This must be\u001b[0m", "    \u001b[37m-# unique on the immediate broadcast network.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# The default is \"Virtualization Host HOSTNAME\", where HOSTNAME\u001b[0m", "    \u001b[37m-# is substituted for the short hostname of the machine (without domain)\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#mdns_name = \"Virtualization Host Joe Demo\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# UNIX socket access controls\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Beware that if you are changing *any* of these options, and you use\u001b[0m", "    \u001b[37m-# socket activation with systemd, you need to adjust the settings in\u001b[0m", "    \u001b[37m-# the libvirtd.socket file as well since it could impose a security\u001b[0m", "    \u001b[37m-# risk if you rely on file permission checking only.\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Set the UNIX domain socket group ownership. This can be used to\u001b[0m", "    \u001b[37m-# allow a 'trusted' set of users access to management capabilities\u001b[0m", "    \u001b[37m-# without becoming root.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# This is restricted to 'root' by default.\u001b[0m", "    \u001b[37m-unix_sock_group = \"libvirtd\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Set the UNIX socket permissions for the R/O socket. This is used\u001b[0m", "    \u001b[37m-# for monitoring VM status only\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Default allows any user. If setting group ownership, you may want to\u001b[0m", "    \u001b[37m-# restrict this too.\u001b[0m", "    \u001b[37m-unix_sock_ro_perms = \"0777\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Set the UNIX socket permissions for the R/W socket. This is used\u001b[0m", "    \u001b[37m-# for full management of VMs\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Default allows only root. If PolicyKit is enabled on the socket,\u001b[0m", "    \u001b[37m-# the default will change to allow everyone (eg, 0777)\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# If not using PolicyKit and setting group ownership for access\u001b[0m", "    \u001b[37m-# control, then you may want to relax this too.\u001b[0m", "    \u001b[37m+listen_tls = 0\u001b[0m", "    \u001b[37m+listen_tcp = 1\u001b[0m", "    \u001b[37m unix_sock_rw_perms = \"0770\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Set the UNIX socket permissions for the admin interface socket.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Default allows only owner (root), do not change it unless you are\u001b[0m", "    \u001b[37m-# sure to whom you are exposing the access to.\u001b[0m", "    \u001b[37m-#unix_sock_admin_perms = \"0700\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Set the name of the directory in which sockets will be found/created.\u001b[0m", "    \u001b[37m-#unix_sock_dir = \"/var/run/libvirt\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Authentication.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#  - none: do not perform auth checks. If you can connect to the\u001b[0m", "    \u001b[37m-#          socket you are allowed. This is suitable if there are\u001b[0m", "    \u001b[37m-#          restrictions on connecting to the socket (eg, UNIX\u001b[0m", "    \u001b[37m-#          socket permissions), or if there is a lower layer in\u001b[0m", "    \u001b[37m-#          the network providing auth (eg, TLS/x509 certificates)\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#  - sasl: use SASL infrastructure. The actual auth scheme is then\u001b[0m", "    \u001b[37m-#          controlled from /etc/sasl2/libvirt.conf. For the TCP\u001b[0m", "    \u001b[37m-#          socket only GSSAPI & DIGEST-MD5 mechanisms will be used.\u001b[0m", "    \u001b[37m-#          For non-TCP or TLS sockets, any scheme is allowed.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#  - polkit: use PolicyKit to authenticate. This is only suitable\u001b[0m", "    \u001b[37m-#            for use on the UNIX sockets. The default policy will\u001b[0m", "    \u001b[37m-#            require a user to supply their own password to gain\u001b[0m", "    \u001b[37m-#            full read/write access (aka sudo like), while anyone\u001b[0m", "    \u001b[37m-#            is allowed read/only access.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Set an authentication scheme for UNIX read-only sockets\u001b[0m", "    \u001b[37m-# By default socket permissions allow anyone to connect\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# To restrict monitoring of domains you may wish to enable\u001b[0m", "    \u001b[37m-# an authentication mechanism here\u001b[0m", "    \u001b[37m auth_unix_ro = \"none\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Set an authentication scheme for UNIX read-write sockets\u001b[0m", "    \u001b[37m-# By default socket permissions only allow root. If PolicyKit\u001b[0m", "    \u001b[37m-# support was compiled into libvirt, the default will be to\u001b[0m", "    \u001b[37m-# use 'polkit' auth.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# If the unix_sock_rw_perms are changed you may wish to enable\u001b[0m", "    \u001b[37m-# an authentication mechanism here\u001b[0m", "    \u001b[37m auth_unix_rw = \"none\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Change the authentication scheme for TCP sockets.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# If you don't enable SASL, then all TCP traffic is cleartext.\u001b[0m", "    \u001b[37m-# Don't do this outside of a dev/test scenario. For real world\u001b[0m", "    \u001b[37m-# use, always enable SASL and use the GSSAPI or DIGEST-MD5\u001b[0m", "    \u001b[37m-# mechanism in /etc/sasl2/libvirt.conf\u001b[0m", "    \u001b[37m-#auth_tcp = \"sasl\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Change the authentication scheme for TLS sockets.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# TLS sockets already have encryption provided by the TLS\u001b[0m", "    \u001b[37m-# layer, and limited authentication is done by certificates\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# It is possible to make use of any SASL authentication\u001b[0m", "    \u001b[37m-# mechanism as well, by using 'sasl' for this option\u001b[0m", "    \u001b[37m-#auth_tls = \"none\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Change the API access control scheme\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# By default an authenticated user is allowed access\u001b[0m", "    \u001b[37m-# to all APIs. Access drivers can place restrictions\u001b[0m", "    \u001b[37m-# on this. By default the 'nop' driver is enabled,\u001b[0m", "    \u001b[37m-# meaning no access control checks are done once a\u001b[0m", "    \u001b[37m-# client has authenticated with libvirtd\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#access_drivers = [ \"polkit\" ]\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# TLS x509 certificate configuration\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Override the default server key file path\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#key_file = \"/etc/pki/libvirt/private/serverkey.pem\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Override the default server certificate file path\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#cert_file = \"/etc/pki/libvirt/servercert.pem\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Override the default CA certificate path\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#ca_file = \"/etc/pki/CA/cacert.pem\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Specify a certificate revocation list.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Defaults to not using a CRL, uncomment to enable it\u001b[0m", "    \u001b[37m-#crl_file = \"/etc/pki/CA/crl.pem\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Authorization controls\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Flag to disable verification of our own server certificates\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# When libvirtd starts it performs some sanity checks against\u001b[0m", "    \u001b[37m-# its own certificates.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Default is to always run sanity checks. Uncommenting this\u001b[0m", "    \u001b[37m-# will disable sanity checks which is not a good idea\u001b[0m", "    \u001b[37m-#tls_no_sanity_certificate = 1\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Flag to disable verification of client certificates\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Client certificate verification is the primary authentication mechanism.\u001b[0m", "    \u001b[37m-# Any client which does not present a certificate signed by the CA\u001b[0m", "    \u001b[37m-# will be rejected.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Default is to always verify. Uncommenting this will disable\u001b[0m", "    \u001b[37m-# verification - make sure an IP whitelist is set\u001b[0m", "    \u001b[37m-#tls_no_verify_certificate = 1\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# A whitelist of allowed x509 Distinguished Names\u001b[0m", "    \u001b[37m-# This list may contain wildcards such as\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#    \"C=GB,ST=London,L=London,O=Red Hat,CN=*\"\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# See the POSIX fnmatch function for the format of the wildcards.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# NB If this is an empty list, no client can connect, so comment out\u001b[0m", "    \u001b[37m-# entirely rather than using empty list to disable these checks\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# By default, no DN's are checked\u001b[0m", "    \u001b[37m-#tls_allowed_dn_list = [\"DN1\", \"DN2\"]\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# A whitelist of allowed SASL usernames. The format for usernames\u001b[0m", "    \u001b[37m-# depends on the SASL authentication mechanism. Kerberos usernames\u001b[0m", "    \u001b[37m-# look like username@REALM\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# This list may contain wildcards such as\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#    \"*@EXAMPLE.COM\"\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# See the POSIX fnmatch function for the format of the wildcards.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# NB If this is an empty list, no client can connect, so comment out\u001b[0m", "    \u001b[37m-# entirely rather than using empty list to disable these checks\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# By default, no Username's are checked\u001b[0m", "    \u001b[37m-#sasl_allowed_username_list = [\"joe@EXAMPLE.COM\", \"fred@EXAMPLE.COM\" ]\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Processing controls\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# The maximum number of concurrent client connections to allow\u001b[0m", "    \u001b[37m-# over all sockets combined.\u001b[0m", "    \u001b[37m-#max_clients = 5000\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# The maximum length of queue of connections waiting to be\u001b[0m", "    \u001b[37m-# accepted by the daemon. Note, that some protocols supporting\u001b[0m", "    \u001b[37m-# retransmission may obey this so that a later reattempt at\u001b[0m", "    \u001b[37m-# connection succeeds.\u001b[0m", "    \u001b[37m-#max_queued_clients = 1000\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# The maximum length of queue of accepted but not yet\u001b[0m", "    \u001b[37m-# authenticated clients. The default value is zero, meaning\u001b[0m", "    \u001b[37m-# the feature is disabled.\u001b[0m", "    \u001b[37m-#max_anonymous_clients = 20\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# The minimum limit sets the number of workers to start up\u001b[0m", "    \u001b[37m-# initially. If the number of active clients exceeds this,\u001b[0m", "    \u001b[37m-# then more threads are spawned, up to max_workers limit.\u001b[0m", "    \u001b[37m-# Typically you'd want max_workers to equal maximum number\u001b[0m", "    \u001b[37m-# of clients allowed\u001b[0m", "    \u001b[37m-#min_workers = 5\u001b[0m", "    \u001b[37m-#max_workers = 20\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# The number of priority workers. If all workers from above\u001b[0m", "    \u001b[37m-# pool are stuck, some calls marked as high priority\u001b[0m", "    \u001b[37m-# (notably domainDestroy) can be executed in this pool.\u001b[0m", "    \u001b[37m-#prio_workers = 5\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Total global limit on concurrent RPC calls. Should be\u001b[0m", "    \u001b[37m-# at least as large as max_workers. Beyond this, RPC requests\u001b[0m", "    \u001b[37m-# will be read into memory and queued. This directly impacts\u001b[0m", "    \u001b[37m-# memory usage, currently each request requires 256 KB of\u001b[0m", "    \u001b[37m-# memory. So by default up to 5 MB of memory is used\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# XXX this isn't actually enforced yet, only the per-client\u001b[0m", "    \u001b[37m-# limit is used so far\u001b[0m", "    \u001b[37m-#max_requests = 20\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Limit on concurrent requests from a single client\u001b[0m", "    \u001b[37m-# connection. To avoid one client monopolizing the server\u001b[0m", "    \u001b[37m-# this should be a small fraction of the global max_requests\u001b[0m", "    \u001b[37m-# and max_workers parameter\u001b[0m", "    \u001b[37m-#max_client_requests = 5\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Same processing controls, but this time for the admin interface.\u001b[0m", "    \u001b[37m-# For description of each option, be so kind to scroll few lines\u001b[0m", "    \u001b[37m-# upwards.\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#admin_min_workers = 1\u001b[0m", "    \u001b[37m-#admin_max_workers = 5\u001b[0m", "    \u001b[37m-#admin_max_clients = 5\u001b[0m", "    \u001b[37m-#admin_max_queued_clients = 5\u001b[0m", "    \u001b[37m-#admin_max_client_requests = 5\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Logging controls\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Logging level: 4 errors, 3 warnings, 2 information, 1 debug\u001b[0m", "    \u001b[37m-# basically 1 will log everything possible\u001b[0m", "    \u001b[37m-# Note: Journald may employ rate limiting of the messages logged\u001b[0m", "    \u001b[37m-# and thus lock up the libvirt daemon. To use the debug level with\u001b[0m", "    \u001b[37m-# journald you have to specify it explicitly in 'log_outputs', otherwise\u001b[0m", "    \u001b[37m-# only information level messages will be logged.\u001b[0m", "    \u001b[37m-#log_level = 3\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Logging filters:\u001b[0m", "    \u001b[37m-# A filter allows to select a different logging level for a given category\u001b[0m", "    \u001b[37m-# of logs\u001b[0m", "    \u001b[37m-# The format for a filter is one of:\u001b[0m", "    \u001b[37m-#    x:name\u001b[0m", "    \u001b[37m-#    x:+name\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#      where name is a string which is matched against the category\u001b[0m", "    \u001b[37m-#      given in the VIR_LOG_INIT() at the top of each libvirt source\u001b[0m", "    \u001b[37m-#      file, e.g., \"remote\", \"qemu\", or \"util.json\" (the name in the\u001b[0m", "    \u001b[37m-#      filter can be a substring of the full category name, in order\u001b[0m", "    \u001b[37m-#      to match multiple similar categories), the optional \"+\" prefix\u001b[0m", "    \u001b[37m-#      tells libvirt to log stack trace for each message matching\u001b[0m", "    \u001b[37m-#      name, and x is the minimal level where matching messages should\u001b[0m", "    \u001b[37m-#      be logged:\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#    1: DEBUG\u001b[0m", "    \u001b[37m-#    2: INFO\u001b[0m", "    \u001b[37m-#    3: WARNING\u001b[0m", "    \u001b[37m-#    4: ERROR\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Multiple filters can be defined in a single @filters, they just need to be\u001b[0m", "    \u001b[37m-# separated by spaces.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# e.g. to only get warning or errors from the remote layer and only errors\u001b[0m", "    \u001b[37m-# from the event layer:\u001b[0m", "    \u001b[37m-#log_filters=\"3:remote 4:event\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Logging outputs:\u001b[0m", "    \u001b[37m-# An output is one of the places to save logging information\u001b[0m", "    \u001b[37m-# The format for an output can be:\u001b[0m", "    \u001b[37m-#    x:stderr\u001b[0m", "    \u001b[37m-#      output goes to stderr\u001b[0m", "    \u001b[37m-#    x:syslog:name\u001b[0m", "    \u001b[37m-#      use syslog for the output and use the given name as the ident\u001b[0m", "    \u001b[37m-#    x:file:file_path\u001b[0m", "    \u001b[37m-#      output to a file, with the given filepath\u001b[0m", "    \u001b[37m-#    x:journald\u001b[0m", "    \u001b[37m-#      output to journald logging system\u001b[0m", "    \u001b[37m-# In all case the x prefix is the minimal level, acting as a filter\u001b[0m", "    \u001b[37m-#    1: DEBUG\u001b[0m", "    \u001b[37m-#    2: INFO\u001b[0m", "    \u001b[37m-#    3: WARNING\u001b[0m", "    \u001b[37m-#    4: ERROR\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Multiple outputs can be defined, they just need to be separated by spaces.\u001b[0m", "    \u001b[37m-# e.g. to log all warnings and errors to syslog under the libvirtd ident:\u001b[0m", "    \u001b[37m-#log_outputs=\"3:syslog:libvirtd\"\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Log debug buffer size:\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# This configuration option is no longer used, since the global\u001b[0m", "    \u001b[37m-# log buffer functionality has been removed. Please configure\u001b[0m", "    \u001b[37m-# suitable log_outputs/log_filters settings to obtain logs.\u001b[0m", "    \u001b[37m-#log_buffer_size = 64\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-##################################################################\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# Auditing\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# This setting allows usage of the auditing subsystem to be altered:\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#   audit_level == 0  -> disable all auditing\u001b[0m", "    \u001b[37m-#   audit_level == 1  -> enable auditing, only if enabled on host (default)\u001b[0m", "    \u001b[37m-#   audit_level == 2  -> enable auditing, and exit if disabled on host\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#audit_level = 2\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# If set to 1, then audit messages will also be sent\u001b[0m", "    \u001b[37m-# via libvirt logging infrastructure. Defaults to 0\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#audit_logging = 1\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-###################################################################\u001b[0m", "    \u001b[37m-# UUID of the host:\u001b[0m", "    \u001b[37m-# Provide the UUID of the host here in case the command\u001b[0m", "    \u001b[37m-# 'dmidecode -s system-uuid' does not provide a valid uuid. In case\u001b[0m", "    \u001b[37m-# 'dmidecode' does not provide a valid UUID and none is provided here, a\u001b[0m", "    \u001b[37m-# temporary UUID will be generated.\u001b[0m", "    \u001b[37m-# Keep the format of the example UUID below. UUID must not have all digits\u001b[0m", "    \u001b[37m-# be the same.\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# NB This default all-zeros UUID will not work. Replace\u001b[0m", "    \u001b[37m-# it with the output of the 'uuidgen' command and then\u001b[0m", "    \u001b[37m-# uncomment this entry\u001b[0m", "    \u001b[37m-#host_uuid = \"00000000-0000-0000-0000-000000000000\"\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-###################################################################\u001b[0m", "    \u001b[37m-# Keepalive protocol:\u001b[0m", "    \u001b[37m-# This allows libvirtd to detect broken client connections or even\u001b[0m", "    \u001b[37m-# dead clients.  A keepalive message is sent to a client after\u001b[0m", "    \u001b[37m-# keepalive_interval seconds of inactivity to check if the client is\u001b[0m", "    \u001b[37m-# still responding; keepalive_count is a maximum number of keepalive\u001b[0m", "    \u001b[37m-# messages that are allowed to be sent to the client without getting\u001b[0m", "    \u001b[37m-# any response before the connection is considered broken.  In other\u001b[0m", "    \u001b[37m-# words, the connection is automatically closed approximately after\u001b[0m", "    \u001b[37m-# keepalive_interval * (keepalive_count + 1) seconds since the last\u001b[0m", "    \u001b[37m-# message received from the client.  If keepalive_interval is set to\u001b[0m", "    \u001b[37m-# -1, libvirtd will never send keepalive requests; however clients\u001b[0m", "    \u001b[37m-# can still send them and the daemon will send responses.  When\u001b[0m", "    \u001b[37m-# keepalive_count is set to 0, connections will be automatically\u001b[0m", "    \u001b[37m-# closed after keepalive_interval seconds of inactivity without\u001b[0m", "    \u001b[37m-# sending any keepalive messages.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#keepalive_interval = 5\u001b[0m", "    \u001b[37m-#keepalive_count = 5\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-# These configuration options are no longer used.  There is no way to\u001b[0m", "    \u001b[37m-# restrict such clients from connecting since they first need to\u001b[0m", "    \u001b[37m-# connect in order to ask for keepalive.\u001b[0m", "    \u001b[37m-#\u001b[0m", "    \u001b[37m-#keepalive_required = 1\u001b[0m", "    \u001b[37m-#admin_keepalive_required = 1\u001b[0m", "    \u001b[37m-\u001b[0m", "    \u001b[37m-# Keepalive settings for the admin interface\u001b[0m", "    \u001b[37m-#admin_keepalive_interval = 5\u001b[0m", "    \u001b[37m-#admin_keepalive_count = 5\u001b[0m", "    \u001b[37m+auth_tcp = \"none\"\u001b[0m", "    \u001b[37m+max_clients = 20\u001b[0m", "    \u001b[37m+max_workers = 20\u001b[0m", "    \u001b[37m+max_requests = 20\u001b[0m", "    \u001b[37m+max_client_requests = 5\u001b[0m", "    \u001b[37m+unix_sock_group = 'libvirt'\u001b[0m", "\u001b[0m  * service[libvirt-bin] action restart", "    \u001b[0m", "    ================================================================================\u001b[0m", "    \u001b[31mError executing action `restart` on resource 'service[libvirt-bin]'\u001b[0m", "    ================================================================================\u001b[0m", "    ", "\u001b[0m    Mixlib::ShellOut::ShellCommandFailed\u001b[0m", "    ------------------------------------\u001b[0m", "    Expected process to exit with [0], but received '1'", "\u001b[0m    ---- Begin output of /bin/systemctl --system restart libvirt-bin ----", "\u001b[0m    STDOUT: ", "\u001b[0m    STDERR: Job for libvirt-bin.service failed because the control process exited with error code. See \"systemctl status libvirt-bin.service\" and \"journalctl -xe\" for details.", "\u001b[0m    ---- End output of /bin/systemctl --system restart libvirt-bin ----", "\u001b[0m    Ran /bin/systemctl --system restart libvirt-bin returned 1\u001b[0m", "    ", "\u001b[0m    Resource Declaration:\u001b[0m", "    ---------------------\u001b[0m", "    # In /root/.chef/local-mode-cache/cache/cookbooks/openstack-compute/recipes/libvirt.rb", "\u001b[0m    ", "\u001b[0m    115: service 'libvirt-bin' do", "\u001b[0m    116:   service_name platform_options['libvirt_service']", "\u001b[0m    117:   supports status: true, restart: true", "\u001b[0m    118:   action [:enable, :start]", "\u001b[0m    119: end", "\u001b[0m    120: ", "\u001b[0m    ", "\u001b[0m    Compiled Resource:\u001b[0m", "    ------------------\u001b[0m", "    # Declared in /root/.chef/local-mode-cache/cache/cookbooks/openstack-compute/recipes/libvirt.rb:115:in `from_file'", "\u001b[0m    ", "\u001b[0m    service(\"libvirt-bin\") do", "\u001b[0m      action [:enable, :start]", "\u001b[0m      updated true", "\u001b[0m      default_guard_interpreter :default", "\u001b[0m      service_name \"libvirt-bin\"", "\u001b[0m      enabled true", "\u001b[0m      running true", "\u001b[0m      masked false", "\u001b[0m      pattern \"libvirt-bin\"", "\u001b[0m      declared_type :service", "\u001b[0m      cookbook_name \"openstack-compute\"", "\u001b[0m      recipe_name \"libvirt\"", "\u001b[0m      supports {:status=>true, :restart=>true}", "\u001b[0m    end", "\u001b[0m    ", "\u001b[0m    System Info:\u001b[0m", "    ------------\u001b[0m", "    chef_version=14.4.56", "\u001b[0m    platform=ubuntu", "\u001b[0m    platform_version=16.04", "\u001b[0m    ruby=ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]", "\u001b[0m    program_name=/usr/bin/chef-client", "\u001b[0m    executable=/opt/chefdk/bin/chef-client\u001b[0m", "    ", "\u001b[0mRecipe: openstack-compute::compute\u001b[0m", "  * service[nova-compute] action restart", "    \u001b[32m- restart service service[nova-compute]\u001b[0m", "\u001b[0m\u001b[0m", "Running handlers:\u001b[0m", "[2019-04-23T15:48:46+00:00] ERROR: Running exception handlers", "Running handlers complete", "\u001b[0m[2019-04-23T15:48:46+00:00] ERROR: Exception handlers complete", "Chef Client failed. 28 resources updated in 04 minutes 36 seconds\u001b[0m", "[2019-04-23T15:48:46+00:00] FATAL: Stacktrace dumped to /root/.chef/local-mode-cache/cache/chef-stacktrace.out", "[2019-04-23T15:48:46+00:00] FATAL: Please provide the contents of the stacktrace.out file if you file a bug report", "[2019-04-23T15:48:46+00:00] FATAL: Mixlib::ShellOut::ShellCommandFailed: service[libvirt-bin] (openstack-compute::libvirt line 115) had an error: Mixlib::ShellOut::ShellCommandFailed: Expected process to exit with [0], but received '1'", "---- Begin output of /bin/systemctl --system restart libvirt-bin ----", "STDOUT: ", "STDERR: Job for libvirt-bin.service failed because the control process exited with error code. See \"systemctl status libvirt-bin.service\" and \"journalctl -xe\" for details.", "---- End output of /bin/systemctl --system restart libvirt-bin ----", "Ran /bin/systemctl --system restart libvirt-bin returned 1"]}
